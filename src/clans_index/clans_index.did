type CKTokenSymbol = variant { ETH; USDC; USDT };
type CanisterManagementError = variant {
  CreateCanisterError : text;
  LockError;
  InsufficientCycles;
  ManagementCanisterError : text;
  LedgerError : text;
  StopCanisterError : text;
  Transfer : text;
  QueryError : text;
  UploadChunkError : text;
  CanisterCallError : text;
  DeleteCanisterError : text;
  InstallCodeError : text;
};
type Clan = record {
  id : principal;
  hosted_tournaments : vec principal;
  members : vec record { principal; ClanMember };
  invited_users : vec record { principal; nat64 };
  twitter : opt text;
  name : text;
  subscription_enabled : bool;
  tags : vec ClanTag;
  subscription_tiers : vec record { text; SubscriptionTier };
  description : text;
  created_at : nat64;
  created_by : principal;
  joining_fee : nat64;
  website : opt text;
  require_proof_of_humanity : bool;
  pending_requests : vec JoinRequest;
  stats : ClanStats;
  privacy : ClanPrivacy;
  supported_currency : Currency;
  environment_settings : ClanEnvironmentSettings;
  discord : opt text;
  active_tables : vec principal;
  treasury : ClanTreasury;
  avatar : opt UserAvatar;
  member_limit : nat32;
};
type ClanEnvironmentSettings = record {
  custom_logo_url : opt text;
  table_name_prefix : opt text;
  custom_background_url : opt text;
  welcome_message : opt text;
  default_table_color : nat64;
  default_card_color : nat64;
  default_environment_color : nat64;
};
type ClanError = variant {
  InsufficientTreasuryBalance : record { available : nat64; required : nat64 };
  StateNotInitialized;
  CannotChangeOwnerRole;
  ExclusiveAccessRequired;
  UserBanned;
  InvitationExpired;
  InsufficientAnalyticsData;
  AnalyticsAccessDenied;
  UserAlreadyMember;
  InvitationRequired;
  InvalidCurrency;
  UserNotMember;
  OnlyOwnerCanPromoteAdmin;
  MinimumContributionRequired : nat64;
  LockError;
  AlreadyInvited;
  JoinRequestNotFound;
  InsufficientSubscriptionPayment : record { paid : nat64; required : nat64 };
  AlreadyApplied;
  MemberSuspended : nat64;
  MinimumMembershipDurationNotMet;
  LogoUrlTooLong;
  CannotInviteMembers;
  DeserializationError : text;
  InvalidDescription;
  TournamentAccessDenied;
  NotAuthorized;
  InvalidUrl : text;
  ClanNotFound;
  TournamentNotHostedByClan;
  ManagementCanisterError : CanisterManagementError;
  CanisterCallFailed : text;
  CannotRemoveOwner;
  InvalidMemberLimit;
  MinimumExperienceRequired : nat64;
  BackgroundUrlTooLong;
  MinimumGamesRequired : nat64;
  CannotCreateTournaments;
  SubscriptionExpired : nat64;
  CurrencyError : CurrencyError;
  CustomStylingNotAvailable;
  MemberNotFound;
  InvalidClanName;
  InvalidRequest : text;
  InvalidRewardDistribution : record { total : nat64; available : nat64 };
  ApplicationRequired;
  VerificationRequired;
  TagAlreadyExists : text;
  InsufficientPermissions;
  MinimumLevelRequired : nat64;
  InvalidRevenueShareBonus;
  UserError : UserError;
  JoinRequestMessageTooLong;
  TournamentNotFound;
  TableNotOwnedByClan;
  AnalyticsPeriodTooLarge;
  InvalidClanTag;
  InviteOnlyAccess;
  ClanFull : nat32;
  SubscriptionTierInactive : text;
  WelcomeMessageTooLong;
  StorageError : text;
  CanisterCallError : text;
  TableStakesExceedLimit : record { stakes : nat64; limit : nat64 };
  CannotRemoveBasicTier;
  InternalError : text;
  InvalidTierName;
  TableNotFound;
  InsufficientJoiningFee : record { paid : nat64; required : nat64 };
  SerializationError : text;
  FeatureNotAvailable : text;
  InvalidTimestamp : nat64;
  AdminOnlyAction : text;
  InsufficientFunds : record { available : nat64; required : nat64 };
  TierInUse : nat64;
  SubscriptionTierNotFound : text;
  ModeratorRequired;
  ClanAlreadyExists;
  InvalidPercentage;
};
type ClanIndexError = variant {
  ClanError : ClanError;
  UserAlreadyMember;
  UserNotMember;
  LockError;
  NotAuthorized;
  ClanNotFound;
  ManagementCanisterError : CanisterManagementError;
  CanisterCallFailed : text;
  SubscriptionExpired;
  InvalidRequest : text;
  TagAlreadyExists;
  InsufficientPermissions;
  ClanFull;
  InvalidSubscriptionTier;
  CanisterCallError : text;
  JoiningFeeRequired;
  InsufficientFunds;
  ClanAlreadyExists;
};
type ClanMember = record {
  xp : nat64;
  status : MemberStatus;
  contribution_points : nat64;
  role : ClanRole;
  subscription_expires_at : opt nat64;
  tournaments_won : nat64;
  last_active : nat64;
  subscription_auto_renew : bool;
  total_subscription_paid : nat64;
  joined_at : nat64;
  subscription_tier : text;
  total_winnings : nat64;
  games_played : nat64;
  principal_id : principal;
};
type ClanPrivacy = variant { Application; Public; InviteOnly };
type ClanRole = variant { Member; Admin; Moderator; Owner };
type ClanSearchFilters = record {
  name_contains : opt text;
  subscription_enabled : opt bool;
  tag_filters : opt TagSearchFilters;
  has_joining_fee : opt bool;
  require_proof_of_humanity : opt bool;
  privacy : opt ClanPrivacy;
  currency : opt Currency;
  min_members : opt nat32;
  max_members : opt nat32;
};
type ClanStats = record {
  total_tournaments_hosted : nat64;
  total_revenue_generated : nat64;
  last_activity : nat64;
  total_games_played : nat64;
  most_active_day : opt nat64;
  creation_date : nat64;
};
type ClanTag = variant {
  Fun;
  UTC;
  VIP;
  HandReviews;
  Africa;
  EarlyMorning;
  Leaderboards;
  Coaching;
  Application;
  Beginner;
  Advanced;
  Weekdays;
  Weekends;
  TextChat;
  Strategy;
  UTCMinus10;
  UTCMinus11;
  UTCMinus12;
  SpinAndGo;
  UTCPlus10;
  UTCPlus11;
  UTCPlus12;
  Asia;
  HeadsUp;
  Korean;
  Japanese;
  Chinese;
  Tournaments;
  UTCMinus1;
  UTCMinus2;
  UTCMinus3;
  UTCMinus4;
  UTCMinus5;
  UTCMinus6;
  UTCMinus7;
  UTCMinus8;
  UTCMinus9;
  Europe;
  Educational;
  Portuguese;
  Rakeback;
  CashGames;
  Professional;
  Streaming;
  Social;
  Italian;
  MidStakes;
  Spanish;
  Custom : text;
  Rewards;
  SouthAmerica;
  Competitive;
  Afternoon;
  TwentyFourSeven;
  Exclusive;
  Russian;
  MixedSkill;
  VoiceChat;
  InviteOnly;
  SitAndGo;
  LateNight;
  Microstakes;
  HighStakes;
  UTCPlus1;
  UTCPlus2;
  UTCPlus3;
  UTCPlus4;
  UTCPlus5;
  UTCPlus6;
  UTCPlus7;
  UTCPlus8;
  UTCPlus9;
  English;
  Serious;
  Nosebleeds;
  Oceania;
  Evening;
  DiscordIntegration;
  German;
  Freerolls;
  StudyGroup;
  MixedGameTypes;
  Intermediate;
  French;
  Verified;
  Casual;
  NorthAmerica;
  Multilingual;
  LowStakes;
};
type ClanTreasury = record {
  reward_distribution : RewardDistributionType;
  revenue_share_percentage : nat8;
  balance : nat64;
  total_revenue_generated : nat64;
  total_joining_fees_collected : nat64;
  total_rewards_distributed : nat64;
  total_subscription_revenue : nat64;
};
type CreateClanRequest = record {
  tag : text;
  twitter : opt text;
  minimum_level_required : opt float64;
  name : text;
  description : text;
  joining_fee : nat64;
  website : opt text;
  require_proof_of_humanity : bool;
  privacy : ClanPrivacy;
  supported_currency : Currency;
  minimum_experience_points : opt nat64;
  discord : opt text;
  avatar : opt UserAvatar;
  member_limit : opt nat32;
};
type Currency = variant {
  BTC;
  ICP;
  GenericICRC1 : Token;
  CKETHToken : CKTokenSymbol;
};
type CurrencyError = variant {
  WalletNotSet;
  BlockQueryFailed : text;
  InsufficientAllowance;
  LockError;
  NoDepositAddress;
  InvalidTransactionDetails;
  OperationNotSupported : text;
  TransferFromFailed : text;
  LedgerError : text;
  CanisterCallFailed : text;
  BlockNotFound;
  DuplicateTransaction;
  WithdrawalFailed : text;
  InvalidTransactionType;
  QueryError : text;
  NoTransactionSignatureProvided;
  TransactionNotFound;
  GetBlockError : text;
  SerializationError : text;
  AllowanceCheckFailed : text;
  InsufficientFunds;
  NoBlockNumberProvided;
};
type EmojiUserAvatar = record { emoji : nat64; style : nat64 };
type JoinRequest = record {
  applicant : principal;
  referred_by : opt principal;
  requested_at : nat64;
  message : opt text;
};
type MemberStatus = variant {
  Inactive;
  Active;
  Suspended : record { until : opt nat64 };
};
type Result = variant { Ok : Clan; Err : ClanIndexError };
type Result_1 = variant { Ok; Err : ClanIndexError };
type Result_2 = variant { Ok : vec Clan; Err : ClanIndexError };
type Result_3 = variant { Ok : text; Err : ClanIndexError };
type Result_4 = variant { Ok : nat64; Err : ClanIndexError };
type Result_5 = variant {
  Ok : vec record { principal; CanisterManagementError };
  Err : ClanIndexError;
};
type RewardDistributionType = variant {
  FixedAmount : nat64;
  Percentage : nat8;
};
type SubscriptionBenefits = record {
  priority_support : bool;
  can_create_tournaments : bool;
  tournament_access : bool;
  exclusive_access : bool;
  can_invite_members : bool;
  description : text;
  can_create_tables : bool;
  custom_styling : bool;
  custom_role_name : opt text;
  max_table_stakes : opt nat64;
  analytics_access : bool;
  revenue_share_bonus : nat8;
};
type SubscriptionRequirements = record {
  minimum_contribution_points : opt nat64;
  requires_invitation : bool;
  requires_verification : bool;
  minimum_membership_duration : opt nat64;
  minimum_games_played : opt nat64;
  monthly_payment : opt nat64;
  one_time_payment : opt nat64;
};
type SubscriptionTier = record {
  id : text;
  name : text;
  benefits : SubscriptionBenefits;
  is_active : bool;
  requirements : SubscriptionRequirements;
  tier_order : nat32;
};
type TagCategory = variant {
  Stakes;
  Language;
  CommunityStyle;
  Custom;
  Benefits;
  Requirements;
  GameType;
  Schedule;
  SkillLevel;
  Geographic;
  Features;
};
type TagSearchFilters = record {
  categories : opt vec TagCategory;
  required_tags : opt vec ClanTag;
  any_of_tags : opt vec ClanTag;
  excluded_tags : opt vec ClanTag;
};
type Token = record { decimals : nat8; ledger_id : principal; symbol : blob };
type UserAvatar = variant { Emoji : EmojiUserAvatar };
type UserError = variant {
  MinimumVerificationDateMismatch;
  UserAlreadyExists;
  StateNotInitialized;
  AuthorizationError;
  PrincipalError : text;
  BlockQueryFailed : text;
  LockError;
  InvalidTransactionDetails;
  ManagementCanisterError : CanisterManagementError;
  LedgerError : text;
  CanisterCallFailed : text;
  InvalidCredentialType : text;
  BlockNotFound;
  DuplicateTransaction;
  InvalidRequest : text;
  InvalidTransactionType;
  QueryError : text;
  InvalidIssuer;
  UpgradeError : text;
  SerializationError : text;
  UserNotFound;
  InsufficientFunds;
  InvalidCredentialStructure;
};
service : () -> {
  create_clan : (CreateClanRequest, principal, principal) -> (Result);
  delete_clan : (principal) -> (Result_1);
  get_all_clans : () -> (Result_2) query;
  get_canister_status_formatted : () -> (Result_3);
  get_clan : (principal) -> (Result);
  get_clan_count : () -> (Result_4) query;
  get_clans_by_currency : (Currency) -> (Result_2) query;
  get_clans_by_member_count : (nat64, opt nat64) -> (Result_2) query;
  get_clans_by_tag : (ClanTag) -> (Result_2) query;
  get_popular_clans : (nat64) -> (Result_2) query;
  get_total_members : () -> (Result_4) query;
  get_user_clans : (principal) -> (Result_2) query;
  join_clan : (principal, principal, principal, nat64) -> (Result_1);
  leave_clan : (principal, principal) -> (Result_1);
  monitor_and_top_up_clan_canisters : () -> (Result_1);
  ping : () -> (text) query;
  request_cycles : () -> (Result_1);
  search_clans : (opt ClanSearchFilters, nat64, nat64) -> (Result_2) query;
  top_up_clan_canister : (principal, nat) -> (Result_1);
  upgrade_all_clan_canisters : () -> (Result_5);
  upgrade_clan_canister : (principal) -> (Result_1);
  upgrade_subscription : (principal, principal, text, nat64, nat32) -> (
      Result_1,
    );
}
