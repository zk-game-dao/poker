type ActionLog = record {
  user_principal : opt principal;
  action_type : ActionType;
  timestamp : nat64;
};
type ActionType = variant {
  Bet : record { amount : nat64 };
  Win : record { amount : nat64 };
  Leave;
  Stage : record { stage : DealStage };
  Call;
  Fold;
  Join;
  BigBlind;
  PlayersHandsRankedMainPot : record {
    hands : vec record { text; vec Card; nat64 };
  };
  Raise : record { amount : nat64 };
  SidePotCreated;
  Kicked : record { reason : text };
  PlayersHandsRankedSidePot : record {
    hands : vec record { text; vec Card; nat64 };
  };
  AllIn : record { amount : nat64 };
  SmallBlind;
  Check;
};
type AddonOptions = record {
  addon_chips : nat64;
  enabled : bool;
  addon_start_time : nat64;
  max_addons : nat32;
  addon_price : nat64;
  addon_end_time : nat64;
};
type AdminRole = variant { SuperAdmin; Admin; Moderator };
type AnteType = variant {
  PercentageOfBigBlind : nat8;
  None;
  BigBlindAnte;
  Fixed : nat64;
};
type BanType = variant {
  TemporarySuspension : record {
    banned_at : nat64;
    banned_by : principal;
    expires_at : nat64;
    reason : text;
  };
  PermanentBan : record {
    banned_at : nat64;
    banned_by : principal;
    reason : text;
  };
  XpBan : record {
    banned_at : nat64;
    banned_by : principal;
    expires_at : nat64;
    reason : text;
  };
};
type BlindLevel = record {
  small_blind : nat64;
  big_blind : nat64;
  ante_type : AnteType;
  duration_ns : nat64;
};
type BuyInOptions = record {
  addon : AddonOptions;
  freezout : bool;
  reentry : ReentryOptions;
  rebuy : RebuyOptions;
};
type CKTokenSymbol = variant { ETH; USDC; USDT };
type CanisterManagementError = variant {
  CreateCanisterError : text;
  LockError;
  InsufficientCycles;
  ManagementCanisterError : text;
  LedgerError : text;
  StopCanisterError : text;
  Transfer : text;
  QueryError : text;
  UploadChunkError : text;
  CanisterCallError : text;
  DeleteCanisterError : text;
  InstallCodeError : text;
};
type Card = record { value : Value; suit : Suit };
type CardRequestData = record {
  user_principal : principal;
  show_cards : bool;
  amount : nat64;
};
type Clan = record {
  id : principal;
  hosted_tournaments : vec principal;
  members : vec record { principal; ClanMember };
  invited_users : vec record { principal; nat64 };
  twitter : opt text;
  name : text;
  subscription_enabled : bool;
  tags : vec ClanTag;
  subscription_tiers : vec record { text; SubscriptionTier };
  description : text;
  created_at : nat64;
  created_by : principal;
  joining_fee : nat64;
  website : opt text;
  require_proof_of_humanity : bool;
  pending_requests : vec JoinRequest;
  stats : ClanStats;
  privacy : ClanPrivacy;
  supported_currency : Currency;
  environment_settings : ClanEnvironmentSettings;
  discord : opt text;
  active_tables : vec principal;
  treasury : ClanTreasury;
  avatar : opt UserAvatar;
  member_limit : nat32;
};
type ClanEnvironmentSettings = record {
  custom_logo_url : opt text;
  table_name_prefix : opt text;
  custom_background_url : opt text;
  welcome_message : opt text;
  default_table_color : nat64;
  default_card_color : nat64;
  default_environment_color : nat64;
};
type ClanError = variant {
  InsufficientTreasuryBalance : record { available : nat64; required : nat64 };
  StateNotInitialized;
  CannotChangeOwnerRole;
  ExclusiveAccessRequired;
  UserBanned;
  InvitationExpired;
  InsufficientAnalyticsData;
  AnalyticsAccessDenied;
  UserAlreadyMember;
  InvitationRequired;
  InvalidCurrency;
  UserNotMember;
  OnlyOwnerCanPromoteAdmin;
  MinimumContributionRequired : nat64;
  LockError;
  AlreadyInvited;
  JoinRequestNotFound;
  InsufficientSubscriptionPayment : record { paid : nat64; required : nat64 };
  AlreadyApplied;
  MemberSuspended : nat64;
  MinimumMembershipDurationNotMet;
  LogoUrlTooLong;
  CannotInviteMembers;
  DeserializationError : text;
  InvalidDescription;
  TournamentAccessDenied;
  NotAuthorized;
  InvalidUrl : text;
  ClanNotFound;
  TournamentNotHostedByClan;
  ManagementCanisterError : CanisterManagementError;
  CanisterCallFailed : text;
  CannotRemoveOwner;
  InvalidMemberLimit;
  MinimumExperienceRequired : nat64;
  BackgroundUrlTooLong;
  MinimumGamesRequired : nat64;
  CannotCreateTournaments;
  SubscriptionExpired : nat64;
  CurrencyError : CurrencyError;
  CustomStylingNotAvailable;
  MemberNotFound;
  InvalidClanName;
  InvalidRequest : text;
  InvalidRewardDistribution : record { total : nat64; available : nat64 };
  ApplicationRequired;
  VerificationRequired;
  TagAlreadyExists : text;
  InsufficientPermissions;
  MinimumLevelRequired : nat64;
  InvalidRevenueShareBonus;
  UserError : UserError;
  JoinRequestMessageTooLong;
  TournamentNotFound;
  TableNotOwnedByClan;
  AnalyticsPeriodTooLarge;
  InvalidClanTag;
  InviteOnlyAccess;
  ClanFull : nat32;
  SubscriptionTierInactive : text;
  WelcomeMessageTooLong;
  StorageError : text;
  CanisterCallError : text;
  TableStakesExceedLimit : record { stakes : nat64; limit : nat64 };
  CannotRemoveBasicTier;
  InternalError : text;
  InvalidTierName;
  TableNotFound;
  InsufficientJoiningFee : record { paid : nat64; required : nat64 };
  SerializationError : text;
  FeatureNotAvailable : text;
  InvalidTimestamp : nat64;
  AdminOnlyAction : text;
  InsufficientFunds : record { available : nat64; required : nat64 };
  TierInUse : nat64;
  SubscriptionTierNotFound : text;
  ModeratorRequired;
  ClanAlreadyExists;
  InvalidPercentage;
};
type ClanEvent = variant {
  MemberPromoted : record {
    by : principal;
    member : principal;
    new_role : ClanRole;
    timestamp : nat64;
  };
  RevenueGenerated : record { timestamp : nat64; amount : nat64 };
  MemberJoined : record {
    member : principal;
    joining_fee_paid : nat64;
    timestamp : nat64;
  };
  RewardDistributed : record {
    to : principal;
    timestamp : nat64;
    amount : nat64;
  };
  MemberSuspended : record {
    by : principal;
    member : principal;
    timestamp : nat64;
    until : opt nat64;
  };
  JoiningFeeUpdated : record {
    by : principal;
    new_fee : nat64;
    old_fee : nat64;
    timestamp : nat64;
  };
  MemberLeft : record { member : principal; timestamp : nat64 };
  TournamentHosted : record { timestamp : nat64; tournament_id : principal };
  SettingsUpdated : record { by : principal; timestamp : nat64 };
};
type ClanInvitation = record {
  clan_tag : text;
  clan_id : principal;
  clan_name : text;
  message : opt text;
  invited_at : nat64;
  invited_by : principal;
  expires_at : opt nat64;
};
type ClanMember = record {
  xp : nat64;
  status : MemberStatus;
  contribution_points : nat64;
  role : ClanRole;
  subscription_expires_at : opt nat64;
  tournaments_won : nat64;
  last_active : nat64;
  subscription_auto_renew : bool;
  total_subscription_paid : nat64;
  joined_at : nat64;
  subscription_tier : text;
  total_winnings : nat64;
  games_played : nat64;
  principal_id : principal;
};
type ClanPrivacy = variant { Application; Public; InviteOnly };
type ClanRole = variant { Member; Admin; Moderator; Owner };
type ClanStats = record {
  total_tournaments_hosted : nat64;
  total_revenue_generated : nat64;
  last_activity : nat64;
  total_games_played : nat64;
  most_active_day : opt nat64;
  creation_date : nat64;
};
type ClanTag = variant {
  Fun;
  UTC;
  VIP;
  HandReviews;
  Africa;
  EarlyMorning;
  Leaderboards;
  Coaching;
  Application;
  Beginner;
  Advanced;
  Weekdays;
  Weekends;
  TextChat;
  Strategy;
  UTCMinus10;
  UTCMinus11;
  UTCMinus12;
  SpinAndGo;
  UTCPlus10;
  UTCPlus11;
  UTCPlus12;
  Asia;
  HeadsUp;
  Korean;
  Japanese;
  Chinese;
  Tournaments;
  UTCMinus1;
  UTCMinus2;
  UTCMinus3;
  UTCMinus4;
  UTCMinus5;
  UTCMinus6;
  UTCMinus7;
  UTCMinus8;
  UTCMinus9;
  Europe;
  Educational;
  Portuguese;
  Rakeback;
  CashGames;
  Professional;
  Streaming;
  Social;
  Italian;
  MidStakes;
  Spanish;
  Custom : text;
  Rewards;
  SouthAmerica;
  Competitive;
  Afternoon;
  TwentyFourSeven;
  Exclusive;
  Russian;
  MixedSkill;
  VoiceChat;
  InviteOnly;
  SitAndGo;
  LateNight;
  Microstakes;
  HighStakes;
  UTCPlus1;
  UTCPlus2;
  UTCPlus3;
  UTCPlus4;
  UTCPlus5;
  UTCPlus6;
  UTCPlus7;
  UTCPlus8;
  UTCPlus9;
  English;
  Serious;
  Nosebleeds;
  Oceania;
  Evening;
  DiscordIntegration;
  German;
  Freerolls;
  StudyGroup;
  MixedGameTypes;
  Intermediate;
  French;
  Verified;
  Casual;
  NorthAmerica;
  Multilingual;
  LowStakes;
};
type ClanTreasury = record {
  reward_distribution : RewardDistributionType;
  revenue_share_percentage : nat8;
  balance : nat64;
  total_revenue_generated : nat64;
  total_joining_fees_collected : nat64;
  total_rewards_distributed : nat64;
  total_subscription_revenue : nat64;
};
type ClanUpdateRequest = record {
  twitter : opt text;
  name : opt text;
  tags : opt vec ClanTag;
  description : opt text;
  joining_fee : opt nat64;
  website : opt text;
  require_proof_of_humanity : opt bool;
  privacy : opt ClanPrivacy;
  environment_settings : opt ClanEnvironmentSettings;
  discord : opt text;
  avatar : opt UserAvatar;
  member_limit : opt nat32;
};
type CreateClanRequest = record {
  tag : text;
  twitter : opt text;
  minimum_level_required : opt float64;
  name : text;
  description : text;
  joining_fee : nat64;
  website : opt text;
  require_proof_of_humanity : bool;
  privacy : ClanPrivacy;
  supported_currency : Currency;
  minimum_experience_points : opt nat64;
  discord : opt text;
  avatar : opt UserAvatar;
  member_limit : opt nat32;
};
type Currency = variant {
  BTC;
  ICP;
  GenericICRC1 : Token;
  CKETHToken : CKTokenSymbol;
};
type CurrencyError = variant {
  WalletNotSet;
  BlockQueryFailed : text;
  InsufficientAllowance;
  LockError;
  NoDepositAddress;
  InvalidTransactionDetails;
  OperationNotSupported : text;
  TransferFromFailed : text;
  LedgerError : text;
  CanisterCallFailed : text;
  BlockNotFound;
  DuplicateTransaction;
  WithdrawalFailed : text;
  InvalidTransactionType;
  QueryError : text;
  NoTransactionSignatureProvided;
  TransactionNotFound;
  GetBlockError : text;
  SerializationError : text;
  AllowanceCheckFailed : text;
  InsufficientFunds;
  NoBlockNumberProvided;
};
type CurrencyType = variant { Fake; Real : Currency };
type CustomTournamentSpeedType = record {
  ante_start_level : nat8;
  ante_percentage : nat8;
  blind_multiplier : float64;
  max_levels : nat8;
  initial_blind_percentage : nat8;
  level_duration_ns : nat64;
};
type DealStage = variant {
  Opening;
  Flop;
  Turn;
  River;
  Showdown;
  Fresh;
  Blinds;
};
type EmojiUserAvatar = record { emoji : nat64; style : nat64 };
type GameType = variant {
  NoLimit : nat64;
  SpreadLimit : record { nat64; nat64 };
  PotLimit : nat64;
  FixedLimit : record { nat64; nat64 };
};
type JoinRequest = record {
  applicant : principal;
  referred_by : opt principal;
  requested_at : nat64;
  message : opt text;
};
type LeaderboardType = variant { Winnings; GamesPlayed; Contribution };
type MemberStatus = variant {
  Inactive;
  Active;
  Suspended : record { until : opt nat64 };
};
type NewTournament = record {
  guaranteed_prize_pool : opt nat64;
  min_players : nat8;
  name : text;
  hero_picture : text;
  description : text;
  max_players : nat32;
  late_registration_duration_ns : nat64;
  require_proof_of_humanity : bool;
  start_time : nat64;
  starting_chips : nat64;
  currency : CurrencyType;
  speed_type : NewTournamentSpeedType;
  buy_in : nat64;
  tournament_type : TournamentType;
};
type NewTournamentSpeedType = variant {
  Regular : nat8;
  Custom : CustomTournamentSpeedType;
  HyperTurbo : nat8;
  Turbo : nat8;
};
type PayoutPercentage = record { position : nat16; percentage : nat8 };
type PayoutStructure = record { payouts : vec PayoutPercentage };
type PlayerAction = variant {
  Joining;
  Folded;
  None;
  SittingOut;
  AllIn;
  Checked;
  Raised : nat64;
  Called;
};
type PublicTable = record {
  id : principal;
  pot : nat64;
  user_table_data : vec record { principal; UserTableData };
  status : TableStatus;
  deal_stage : DealStage;
  small_blind : nat64;
  sorted_users : opt vec UserCards;
  last_timer_started_timestamp : nat64;
  action_logs : vec ActionLog;
  queue : vec QueueItem;
  last_raise : nat64;
  seats : vec SeatStatus;
  round_ticker : nat64;
  community_cards : vec Card;
  current_player_index : nat64;
  big_blind : nat64;
  users : Users;
  dealer_position : nat64;
  highest_bet : nat64;
  config : TableConfig;
  side_pots : vec SidePot;
  winners : opt vec User;
};
type QueueItem = variant {
  Deposit : record { principal; principal; nat64 };
  SittingOut : principal;
  UpdateBlinds : record { nat64; nat64; opt AnteType };
  PauseTableForAddon : nat64;
  RemoveUser : record { principal; ActionType };
  SittingIn : record { principal; bool };
  PauseTable;
  LeaveTableToMove : record { principal; principal; principal };
};
type Rank = variant {
  StraightFlush : nat32;
  Straight : nat32;
  OnePair : nat32;
  FullHouse : nat32;
  TwoPair : nat32;
  HighCard : nat32;
  ThreeOfAKind : nat32;
  Flush : nat32;
  FourOfAKind : nat32;
};
type RebuyOptions = record {
  max_rebuys : nat32;
  rebuy_chips : nat64;
  rebuy_end_timestamp : nat64;
  min_chips_for_rebuy : nat64;
  enabled : bool;
  rebuy_price : nat64;
  rebuy_window_seconds : nat64;
};
type ReentryOptions = record {
  reentry_end_timestamp : nat64;
  max_reentries : nat32;
  reentry_chips : nat64;
  enabled : bool;
  reentry_price : nat64;
};
type Result = variant { Ok; Err : ClanError };
type Result_1 = variant { Ok : bool; Err : ClanError };
type Result_10 = variant { Ok : vec principal; Err : ClanError };
type Result_11 = variant { Ok : vec principal; Err : ClanError };
type Result_12 = variant { Ok : ClanTreasury; Err : ClanError };
type Result_13 = variant {
  Ok : vec record { principal; nat64 };
  Err : ClanError;
};
type Result_14 = variant {
  Ok : vec record { principal; nat64 };
  Err : ClanError;
};
type Result_15 = variant { Ok : vec JoinRequest; Err : ClanError };
type Result_16 = variant { Ok : vec SubscriptionTier; Err : ClanError };
type Result_17 = variant {
  Ok : vec record { principal; text };
  Err : ClanError;
};
type Result_18 = variant { Ok : ClanInvitation; Err : ClanError };
type Result_2 = variant { Ok : Clan; Err : ClanError };
type Result_3 = variant { Ok : PublicTable; Err : ClanError };
type Result_4 = variant { Ok : TournamentData; Err : ClanError };
type Result_5 = variant { Ok : text; Err : ClanError };
type Result_6 = variant { Ok : vec ClanEvent; Err : ClanError };
type Result_7 = variant { Ok : ClanMember; Err : ClanError };
type Result_8 = variant { Ok : vec ClanMember; Err : ClanError };
type Result_9 = variant { Ok : ClanStats; Err : ClanError };
type RevenueSource = variant { Tournament; Table; Subscription };
type RewardDistributionType = variant {
  FixedAmount : nat64;
  Percentage : nat8;
};
type SeatStatus = variant {
  Empty;
  QueuedForNextRound : record { principal; User; bool };
  Reserved : record { "principal" : principal; timestamp : nat64 };
  Occupied : principal;
};
type SidePot = record {
  pot : nat64;
  confirmed_pot : nat64;
  highest_bet : nat64;
  user_principals : vec principal;
};
type SpeedType = variant {
  Regular : SpeedTypeParams;
  Custom : SpeedTypeParams;
  HyperTurbo : SpeedTypeParams;
  Turbo : SpeedTypeParams;
};
type SpeedTypeParams = record {
  current_level : nat8;
  ante_start_level : nat8;
  ante_percentage : nat8;
  next_level_time : opt nat64;
  blind_multiplier : float64;
  blind_levels : vec BlindLevel;
  initial_blind_percentage : nat8;
  level_duration_ns : nat64;
};
type SpinGoMultiplier = record {
  multiplier : nat64;
  payout_structure : vec PayoutPercentage;
};
type SubscriptionBenefits = record {
  priority_support : bool;
  can_create_tournaments : bool;
  tournament_access : bool;
  exclusive_access : bool;
  can_invite_members : bool;
  description : text;
  can_create_tables : bool;
  custom_styling : bool;
  custom_role_name : opt text;
  max_table_stakes : opt nat64;
  analytics_access : bool;
  revenue_share_bonus : nat8;
};
type SubscriptionRequirements = record {
  minimum_contribution_points : opt nat64;
  requires_invitation : bool;
  requires_verification : bool;
  minimum_membership_duration : opt nat64;
  minimum_games_played : opt nat64;
  monthly_payment : opt nat64;
  one_time_payment : opt nat64;
};
type SubscriptionTier = record {
  id : text;
  name : text;
  benefits : SubscriptionBenefits;
  is_active : bool;
  requirements : SubscriptionRequirements;
  tier_order : nat32;
};
type Suit = variant { Spade; Diamond; Club; Heart };
type TableBalancer = record {
  balance_interval_ns : nat64;
  max_players_per_table : nat8;
  min_players_per_table : nat8;
};
type TableConfig = record {
  max_inactive_turns : nat16;
  enable_rake : opt bool;
  card_color : nat64;
  name : text;
  color : nat64;
  currency_type : CurrencyType;
  is_shared_rake : opt record { principal; text };
  is_private : opt bool;
  seats : nat8;
  require_proof_of_humanity : opt bool;
  environment_color : nat64;
  max_seated_out_turns : opt nat16;
  is_paused : opt bool;
  game_type : GameType;
  timer_duration : nat16;
  auto_start_timer : nat16;
  ante_type : opt AnteType;
  table_type : opt TableType;
};
type TableInfo = record {
  players : vec principal;
  last_balance_time : opt nat64;
};
type TableStatus = variant { Paused; Reserved; Open; Closed };
type TableType = variant {
  Cash;
  Tournament : record { is_final_table : bool; tournament_id : principal };
  SitAndGo;
  Satellite;
};
type Token = record { decimals : nat8; ledger_id : principal; symbol : blob };
type TournamentData = record {
  id : principal;
  table_config : TableConfig;
  sorted_users : opt vec record { principal; nat64 };
  guaranteed_prize_pool : opt nat64;
  min_players : nat8;
  name : text;
  hero_picture : text;
  description : text;
  max_players : nat32;
  late_registration_duration_ns : nat64;
  tables : vec record { principal; TableInfo };
  require_proof_of_humanity : bool;
  state : TournamentState;
  start_time : nat64;
  starting_chips : nat64;
  currency : CurrencyType;
  speed_type : SpeedType;
  all_players : vec record { principal; UserTournamentData };
  current_players : vec record { principal; UserTournamentData };
  buy_in : nat64;
  payout_structure : PayoutStructure;
  tournament_type : TournamentType;
};
type TournamentSizeType = variant {
  MultiTable : record { BuyInOptions; TableBalancer };
  SingleTable : BuyInOptions;
};
type TournamentState = variant {
  Registration;
  FinalTable;
  LateRegistration;
  Running;
  Cancelled;
  Completed;
};
type TournamentType = variant {
  SpinAndGo : record { TournamentSizeType; SpinGoMultiplier };
  BuyIn : TournamentSizeType;
  SitAndGo : TournamentSizeType;
  Freeroll : TournamentSizeType;
};
type User = record {
  experience_points_pure_poker : opt nat64;
  experience_points : opt nat64;
  user_name : text;
  referrer : opt principal;
  eth_wallet_address : opt text;
  balance : nat64;
  referred_users : opt vec record { principal; nat64 };
  created_at : opt nat64;
  ban_history : opt vec BanType;
  ban_status : opt BanType;
  is_verified : opt bool;
  address : opt text;
  admin_role : opt AdminRole;
  principal_id : principal;
  referral_start_date : opt nat64;
  active_tables : vec principal;
  users_canister_id : principal;
  volume_level : opt nat16;
  enlarge_text : opt bool;
  avatar : opt UserAvatar;
};
type UserAvatar = variant { Emoji : EmojiUserAvatar };
type UserCards = record {
  id : principal;
  cards : vec Card;
  rank : Rank;
  amount_won : nat64;
};
type UserError = variant {
  MinimumVerificationDateMismatch;
  UserAlreadyExists;
  StateNotInitialized;
  AuthorizationError;
  PrincipalError : text;
  BlockQueryFailed : text;
  LockError;
  InvalidTransactionDetails;
  ManagementCanisterError : CanisterManagementError;
  LedgerError : text;
  CanisterCallFailed : text;
  InvalidCredentialType : text;
  BlockNotFound;
  DuplicateTransaction;
  InvalidRequest : text;
  InvalidTransactionType;
  QueryError : text;
  InvalidIssuer;
  UpgradeError : text;
  SerializationError : text;
  UserNotFound;
  InsufficientFunds;
  InvalidCredentialStructure;
};
type UserTableData = record {
  experience_points : nat64;
  inactive_turns : nat16;
  player_action : PlayerAction;
  cards : vec Card;
  total_bet : nat64;
  current_total_bet : nat64;
  show_card_requests : vec CardRequestData;
  seated_out_turns : nat16;
  auto_check_fold : bool;
};
type UserTournamentData = record {
  chips : nat64;
  users_canister_principal : principal;
  addons : nat32;
  position : nat32;
  reentries : nat32;
  rebuys : nat32;
};
type Users = record { users : vec record { principal; User } };
type Value = variant {
  Ace;
  Six;
  Ten;
  Two;
  Eight;
  Seven;
  Five;
  Four;
  Jack;
  King;
  Nine;
  Three;
  Queen;
};
service : () -> {
  accept_clan_invitation : (principal, principal) -> (Result);
  add_clan_revenue : (nat64, RevenueSource) -> (Result);
  approve_join_request : (principal, principal, principal) -> (Result);
  can_access_table_stakes : (principal, nat64) -> (Result_1) query;
  can_member_access_benefits : (principal, text) -> (Result_1) query;
  can_member_access_table : (principal, nat64) -> (Result_1) query;
  create_clan : (CreateClanRequest, principal, principal) -> (Result_2);
  create_clan_table : (TableConfig, principal) -> (Result_3);
  create_clan_tournament : (NewTournament, TableConfig, principal) -> (
      Result_4,
    );
  create_custom_subscription_tier : (
      text,
      text,
      SubscriptionRequirements,
      SubscriptionBenefits,
      bool,
      nat32,
      principal,
    ) -> (Result);
  create_subscription_tier : (SubscriptionTier, principal) -> (Result);
  distribute_rewards : (vec record { principal; nat64 }, principal) -> (Result);
  get_canister_status_formatted : () -> (Result_5);
  get_clan : () -> (Result_2) query;
  get_clan_events : (opt nat64) -> (Result_6) query;
  get_clan_member : (principal) -> (Result_7) query;
  get_clan_members : () -> (Result_8) query;
  get_clan_statistics : () -> (Result_9) query;
  get_clan_tables : () -> (Result_10) query;
  get_clan_tournaments : () -> (Result_11) query;
  get_clan_treasury : () -> (Result_12) query;
  get_invited_users : () -> (Result_13) query;
  get_leaderboard : (LeaderboardType) -> (Result_14) query;
  get_pending_requests : () -> (Result_15) query;
  get_subscription_tiers : () -> (Result_16) query;
  has_tier_access : (principal, text) -> (Result_1) query;
  join_clan : (principal, principal, nat64) -> (Result);
  kick_member : (principal, principal) -> (Result);
  leave_clan : (principal) -> (Result);
  ping : () -> (text) query;
  process_subscription_renewals : () -> (Result_17);
  reject_join_request : (principal, principal) -> (Result);
  remove_clan_table : (principal, principal) -> (Result);
  remove_clan_tournament : (principal, principal) -> (Result);
  remove_subscription_tier : (text, principal) -> (Result);
  request_cycles : () -> (Result);
  send_clan_invitation : (principal, principal, opt text, opt nat64) -> (
      Result_18,
    );
  submit_join_request : (principal, principal, opt text, opt principal) -> (
      Result,
    );
  suspend_member : (principal, principal, opt nat64) -> (Result);
  update_clan_game_stats : (opt principal, opt principal, nat64) -> (Result);
  update_clan_settings : (ClanUpdateRequest, principal) -> (Result);
  update_member_role : (principal, ClanRole, principal) -> (Result);
  update_member_stats : (principal, nat64, nat64, nat64, nat64) -> (Result);
  upgrade_subscription : (principal, text, nat64, nat32) -> (Result);
}
