type ActionLog = record {
  user_principal : opt principal;
  action_type : ActionType;
  timestamp : nat64;
};
type ActionType = variant {
  Bet : record { amount : nat64 };
  Win : record { amount : nat64 };
  Leave;
  Stage : record { stage : DealStage };
  Call;
  Fold;
  Join;
  BigBlind;
  PlayersHandsRankedMainPot : record {
    hands : vec record { text; vec Card; nat64 };
  };
  Raise : record { amount : nat64 };
  SidePotCreated;
  Kicked : record { reason : text };
  PlayersHandsRankedSidePot : record {
    hands : vec record { text; vec Card; nat64 };
  };
  AllIn : record { amount : nat64 };
  SmallBlind;
  Check;
};
type AddonOptions = record {
  addon_chips : nat64;
  enabled : bool;
  addon_start_time : nat64;
  max_addons : nat32;
  addon_price : nat64;
  addon_end_time : nat64;
};
type AdminRole = variant { SuperAdmin; Admin; Moderator };
type AnteType = variant {
  PercentageOfBigBlind : nat8;
  None;
  BigBlindAnte;
  Fixed : nat64;
};
type BanType = variant {
  TemporarySuspension : record {
    banned_at : nat64;
    banned_by : principal;
    expires_at : nat64;
    reason : text;
  };
  PermanentBan : record {
    banned_at : nat64;
    banned_by : principal;
    reason : text;
  };
  XpBan : record {
    banned_at : nat64;
    banned_by : principal;
    expires_at : nat64;
    reason : text;
  };
};
type BlindLevel = record {
  small_blind : nat64;
  big_blind : nat64;
  ante_type : AnteType;
  duration_ns : nat64;
};
type BuyInOptions = record {
  addon : AddonOptions;
  freezout : bool;
  reentry : ReentryOptions;
  rebuy : RebuyOptions;
};
type CKTokenSymbol = variant { ETH; USDC; USDT };
type CanisterManagementError = variant {
  CreateCanisterError : text;
  InsufficientCycles;
  ManagementCanisterError : text;
  LedgerError : text;
  StopCanisterError : text;
  Transfer : text;
  QueryError : text;
  CanisterCallError : text;
  DeleteCanisterError : text;
  InstallCodeError : text;
};
type Card = record { value : Value; suit : Suit };
type CardRequestData = record {
  user_principal : principal;
  show_cards : bool;
  amount : nat64;
};
type ChatError = variant {
  EditTimeExpired : nat64;
  SenderMuted : principal;
  LockError : text;
  MessageNotFound : nat64;
  DuplicateMessageId : nat64;
  ChatHistoryFull;
  Unauthorized : record { reason : text };
  RateLimitExceeded;
  InvalidRequest : record { reason : text };
  UserNotInTable : principal;
  InternalError : text;
  MessageTooLong : record { max_size : nat64; current_size : nat64 };
};
type Currency = variant {
  BTC;
  ICP;
  GenericICRC1 : Token;
  CKETHToken : CKTokenSymbol;
};
type CurrencyError = variant {
  WalletNotSet;
  BlockQueryFailed : text;
  InsufficientAllowance;
  LockError;
  NoDepositAddress;
  InvalidTransactionDetails;
  OperationNotSupported : text;
  TransferFromFailed : text;
  LedgerError : text;
  CanisterCallFailed : text;
  BlockNotFound;
  DuplicateTransaction;
  WithdrawalFailed : text;
  InvalidTransactionType;
  QueryError : text;
  NoTransactionSignatureProvided;
  TransactionNotFound;
  GetBlockError : text;
  SerializationError : text;
  AllowanceCheckFailed : text;
  InsufficientFunds;
  NoBlockNumberProvided;
};
type CurrencyType = variant { Fake; Real : Currency };
type DealStage = variant {
  Opening;
  Flop;
  Turn;
  River;
  Showdown;
  Fresh;
  Blinds;
};
type EmojiUserAvatar = record { emoji : nat64; style : nat64 };
type GameError = variant {
  UserAlreadyExists;
  CouldNotCalculateRake;
  ActionNotAllowed : record { reason : text };
  PlayerNotFound;
  NoCardsLeft;
  CardNotFound;
  GameFull;
  CanisterCallFailed : text;
  UserAlreadyInGame;
  Other : text;
  InvalidCardValue;
  BlindInsufficientFunds : record { user_id : nat64 };
  TableNotFound;
  InsufficientFunds;
  NoWinner;
};
type GameType = variant {
  NoLimit : nat64;
  SpreadLimit : record { nat64; nat64 };
  PotLimit : nat64;
  FixedLimit : record { nat64; nat64 };
};
type PayoutPercentage = record { position : nat16; percentage : nat8 };
type PayoutStructure = record { payouts : vec PayoutPercentage };
type PlayerAction = variant {
  Joining;
  Folded;
  None;
  SittingOut;
  AllIn;
  Checked;
  Raised : nat64;
  Called;
};
type PublicTable = record {
  id : principal;
  pot : nat64;
  user_table_data : vec record { principal; UserTableData };
  status : TableStatus;
  deal_stage : DealStage;
  small_blind : nat64;
  sorted_users : opt vec UserCards;
  last_timer_started_timestamp : nat64;
  action_logs : vec ActionLog;
  queue : vec QueueItem;
  last_raise : nat64;
  seats : vec SeatStatus;
  round_ticker : nat64;
  community_cards : vec Card;
  current_player_index : nat64;
  big_blind : nat64;
  users : Users;
  dealer_position : nat64;
  highest_bet : nat64;
  config : TableConfig;
  side_pots : vec SidePot;
  winners : opt vec User;
};
type QueueItem = variant {
  Deposit : record { principal; principal; nat64 };
  SittingOut : principal;
  UpdateBlinds : record { nat64; nat64; opt AnteType };
  PauseTableForAddon : nat64;
  RemoveUser : record { principal; ActionType };
  SittingIn : record { principal; bool };
  PauseTable;
  LeaveTableToMove : record { principal; principal; principal };
};
type Rank = variant {
  StraightFlush : nat32;
  Straight : nat32;
  OnePair : nat32;
  FullHouse : nat32;
  TwoPair : nat32;
  HighCard : nat32;
  ThreeOfAKind : nat32;
  Flush : nat32;
  FourOfAKind : nat32;
};
type RebuyOptions = record {
  max_rebuys : nat32;
  rebuy_chips : nat64;
  rebuy_end_timestamp : nat64;
  min_chips_for_rebuy : nat64;
  enabled : bool;
  rebuy_price : nat64;
  rebuy_window_seconds : nat64;
};
type ReentryOptions = record {
  reentry_end_timestamp : nat64;
  max_reentries : nat32;
  reentry_chips : nat64;
  enabled : bool;
  reentry_price : nat64;
};
type Result = variant { Ok; Err : TournamentError };
type Result_1 = variant { Ok : TournamentData; Err : TournamentError };
type Result_2 = variant { Ok : nat64; Err : TournamentError };
type Result_3 = variant { Ok : text; Err : TournamentError };
type Result_4 = variant {
  Ok : vec record { principal; nat64 };
  Err : TournamentError;
};
type SeatStatus = variant {
  Empty;
  QueuedForNextRound : record { principal; User; bool };
  Reserved : record { "principal" : principal; timestamp : nat64 };
  Occupied : principal;
};
type SidePot = record {
  pot : nat64;
  confirmed_pot : nat64;
  highest_bet : nat64;
  user_principals : vec principal;
};
type SpeedType = variant {
  Regular : SpeedTypeParams;
  Custom : SpeedTypeParams;
  HyperTurbo : SpeedTypeParams;
  Turbo : SpeedTypeParams;
};
type SpeedTypeParams = record {
  current_level : nat8;
  ante_start_level : nat8;
  ante_percentage : nat8;
  next_level_time : opt nat64;
  blind_multiplier : float64;
  blind_levels : vec BlindLevel;
  initial_blind_percentage : nat8;
  level_duration_ns : nat64;
};
type SpinGoMultiplier = record {
  multiplier : nat64;
  payout_structure : vec PayoutPercentage;
};
type Suit = variant { Spade; Diamond; Club; Heart };
type TableBalancer = record {
  balance_interval_ns : nat64;
  max_players_per_table : nat8;
  min_players_per_table : nat8;
};
type TableConfig = record {
  max_inactive_turns : nat16;
  enable_rake : opt bool;
  card_color : nat64;
  name : text;
  color : nat64;
  currency_type : CurrencyType;
  is_shared_rake : opt record { principal; text };
  is_private : opt bool;
  seats : nat8;
  require_proof_of_humanity : opt bool;
  environment_color : nat64;
  max_seated_out_turns : opt nat16;
  is_paused : opt bool;
  game_type : GameType;
  timer_duration : nat16;
  auto_start_timer : nat16;
  ante_type : opt AnteType;
  table_type : opt TableType;
};
type TableError = variant {
  UserAlreadyExists;
  SeatNotFound;
  StateNotInitialized;
  AuthorizationError;
  Chat : ChatError;
  Game : GameError;
  BlockQueryFailed : text;
  UserBanned;
  LockError;
  PlayerNotFound;
  InvalidTransactionDetails;
  ManagementCanisterError : CanisterManagementError;
  LedgerError : text;
  BlockNotFound;
  CurrencyError : CurrencyError;
  DuplicateTransaction;
  InvalidRequest : text;
  InvalidTransactionType;
  QueryError : text;
  UserError : UserError;
  UserAlreadyInGame;
  CanisterCallError : text;
  UserNotVerified;
  TableNotFound;
  InvalidBlinds;
  SerializationError : text;
  UserNotFound;
  InsufficientFunds;
  NoWinner;
};
type TableInfo = record {
  players : vec principal;
  last_balance_time : opt nat64;
};
type TableStatus = variant { Paused; Reserved; Open; Closed };
type TableType = variant {
  Cash;
  Tournament : record { is_final_table : bool; tournament_id : principal };
  SitAndGo;
  Satellite;
};
type Token = record { decimals : nat8; ledger_id : principal; symbol : blob };
type TournamentData = record {
  id : principal;
  table_config : TableConfig;
  sorted_users : opt vec principal;
  guaranteed_prize_pool : opt nat64;
  min_players : nat8;
  name : text;
  hero_picture : text;
  description : text;
  max_players : nat32;
  late_registration_duration_ns : nat64;
  tables : vec record { principal; TableInfo };
  require_proof_of_humanity : bool;
  state : TournamentState;
  start_time : nat64;
  starting_chips : nat64;
  currency : CurrencyType;
  speed_type : SpeedType;
  all_players : vec record { principal; UserTournamentData };
  current_players : vec record { principal; UserTournamentData };
  buy_in : nat64;
  payout_structure : PayoutStructure;
  tournament_type : TournamentType;
};
type TournamentError = variant {
  NotRegistered;
  AddonNotAllowed : text;
  UserBanned;
  LockError;
  RebuyNotAllowed : text;
  AlreadyRegistered;
  NotAuthorized;
  ManagementCanisterError : CanisterManagementError;
  RegistrationClosed;
  InvalidConfiguration : text;
  UserError : UserError;
  TournamentNotFound;
  Other : text;
  TournamentFull;
  CanisterCallError : text;
  TransferFailed : text;
  UserNotVerified;
  TableError : TableError;
  TemplateNotFound;
  TableNotFound;
  ReentryNotAllowed : text;
  InvalidState : text;
  InsufficientFunds;
};
type TournamentSizeType = variant {
  MultiTable : record { BuyInOptions; TableBalancer };
  SingleTable : BuyInOptions;
};
type TournamentState = variant {
  Registration;
  FinalTable;
  LateRegistration;
  Running;
  Cancelled;
  Completed;
};
type TournamentType = variant {
  SpinAndGo : record { TournamentSizeType; SpinGoMultiplier };
  BuyIn : TournamentSizeType;
  SitAndGo : TournamentSizeType;
  Freeroll : TournamentSizeType;
};
type User = record {
  experience_points_pure_poker : opt nat64;
  experience_points : opt nat64;
  user_name : text;
  referrer : opt principal;
  eth_wallet_address : opt text;
  balance : nat64;
  referred_users : opt vec record { principal; nat64 };
  created_at : opt nat64;
  ban_history : opt vec BanType;
  ban_status : opt BanType;
  is_verified : opt bool;
  address : opt text;
  admin_role : opt AdminRole;
  principal_id : principal;
  referral_start_date : opt nat64;
  active_tables : vec principal;
  users_canister_id : principal;
  volume_level : opt nat16;
  enlarge_text : opt bool;
  avatar : opt UserAvatar;
};
type UserAvatar = variant { Emoji : EmojiUserAvatar };
type UserCards = record {
  id : principal;
  cards : vec Card;
  rank : Rank;
  amount_won : nat64;
};
type UserError = variant {
  MinimumVerificationDateMismatch;
  UserAlreadyExists;
  StateNotInitialized;
  AuthorizationError;
  PrincipalError : text;
  BlockQueryFailed : text;
  LockError;
  InvalidTransactionDetails;
  ManagementCanisterError : CanisterManagementError;
  LedgerError : text;
  CanisterCallFailed : text;
  InvalidCredentialType : text;
  BlockNotFound;
  DuplicateTransaction;
  InvalidRequest : text;
  InvalidTransactionType;
  QueryError : text;
  InvalidIssuer;
  UpgradeError : text;
  SerializationError : text;
  UserNotFound;
  InsufficientFunds;
  InvalidCredentialStructure;
};
type UserTableData = record {
  experience_points : nat64;
  inactive_turns : nat16;
  player_action : PlayerAction;
  cards : vec Card;
  total_bet : nat64;
  current_total_bet : nat64;
  show_card_requests : vec CardRequestData;
  seated_out_turns : nat16;
  auto_check_fold : bool;
};
type UserTournamentAction = variant { Leave : principal; Join : principal };
type UserTournamentData = record {
  chips : nat64;
  users_canister_principal : principal;
  addons : nat32;
  position : nat32;
  reentries : nat32;
  rebuys : nat32;
};
type Users = record { users : vec record { principal; User } };
type Value = variant {
  Ace;
  Six;
  Ten;
  Two;
  Eight;
  Seven;
  Five;
  Four;
  Jack;
  King;
  Nine;
  Three;
  Queen;
};
service : () -> {
  cancel_tournament : () -> (Result);
  create_tournament : (TournamentData, TableConfig, nat64) -> (Result_1);
  deposit_prize_pool : (nat64, principal, bool) -> (Result);
  distribute_winnings : (PublicTable) -> (Result);
  get_balance_time_interval : () -> (Result_2) query;
  get_canister_status_formatted : () -> (Result_3);
  get_last_balance_timestamp : () -> (nat64) query;
  get_leaderboard : () -> (Result_4) query;
  get_live_leaderboard : () -> (Result_4);
  get_total_prize_pool : () -> (nat64) query;
  get_tournament : () -> (Result_1) query;
  handle_cancelled_tournament : () -> (Result);
  handle_tournament_end : () -> (Result);
  handle_user_losing : (principal, principal) -> (Result);
  move_player_from_to_table : (principal, principal) -> (Result);
  ping : () -> (text) query;
  request_cycles : () -> (Result);
  return_all_cycles_to_tournament_index : () -> (Result);
  update_player_count_tournament : (principal, UserTournamentAction) -> (
      Result,
    );
  user_join_tournament : (principal, principal) -> (Result);
  user_leave_tournament : (principal, principal) -> (Result);
  user_rebuy_into_tournament : (principal, principal, principal) -> (Result);
  user_reentry_into_tournament : (principal, principal, principal) -> (Result);
  user_refill_chips : (principal, principal, principal) -> (Result);
}
