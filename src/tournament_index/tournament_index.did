type AddonOptions = record {
  addon_chips : nat64;
  enabled : bool;
  addon_start_time : nat64;
  max_addons : nat32;
  addon_price : nat64;
  addon_end_time : nat64;
};
type AnteType = variant {
  PercentageOfBigBlind : nat8;
  None;
  BigBlindAnte;
  Fixed : nat64;
};
type BlindLevel = record {
  small_blind : nat64;
  big_blind : nat64;
  ante_type : AnteType;
  duration_ns : nat64;
};
type BuyInOptions = record {
  addon : AddonOptions;
  freezout : bool;
  reentry : ReentryOptions;
  rebuy : RebuyOptions;
};
type CKTokenSymbol = variant { ETH; USDC; USDT };
type CanisterManagementError = variant {
  CreateCanisterError : text;
  InsufficientCycles;
  ManagementCanisterError : text;
  LedgerError : text;
  StopCanisterError : text;
  Transfer : text;
  QueryError : text;
  CanisterCallError : text;
  DeleteCanisterError : text;
  InstallCodeError : text;
};
type ChatError = variant {
  EditTimeExpired : nat64;
  SenderMuted : principal;
  LockError : text;
  MessageNotFound : nat64;
  DuplicateMessageId : nat64;
  ChatHistoryFull;
  Unauthorized : record { reason : text };
  RateLimitExceeded;
  InvalidRequest : record { reason : text };
  UserNotInTable : principal;
  InternalError : text;
  MessageTooLong : record { max_size : nat64; current_size : nat64 };
};
type Currency = variant {
  BTC;
  ICP;
  GenericICRC1 : Token;
  CKETHToken : CKTokenSymbol;
};
type CurrencyError = variant {
  WalletNotSet;
  BlockQueryFailed : text;
  InsufficientAllowance;
  LockError;
  NoDepositAddress;
  InvalidTransactionDetails;
  OperationNotSupported : text;
  TransferFromFailed : text;
  LedgerError : text;
  CanisterCallFailed : text;
  BlockNotFound;
  DuplicateTransaction;
  WithdrawalFailed : text;
  InvalidTransactionType;
  QueryError : text;
  NoTransactionSignatureProvided;
  TransactionNotFound;
  GetBlockError : text;
  SerializationError : text;
  AllowanceCheckFailed : text;
  InsufficientFunds;
  NoBlockNumberProvided;
};
type CurrencyType = variant { Fake; Real : Currency };
type CustomTournamentSpeedType = record {
  ante_start_level : nat8;
  ante_percentage : nat8;
  blind_multiplier : float64;
  max_levels : nat8;
  initial_blind_percentage : nat8;
  level_duration_ns : nat64;
};
type GameError = variant {
  UserAlreadyExists;
  CouldNotCalculateRake;
  ActionNotAllowed : record { reason : text };
  PlayerNotFound;
  NoCardsLeft;
  CardNotFound;
  GameFull;
  CanisterCallFailed : text;
  UserAlreadyInGame;
  Other : text;
  InvalidCardValue;
  BlindInsufficientFunds : record { user_id : nat64 };
  TableNotFound;
  InsufficientFunds;
  NoWinner;
};
type GameType = variant {
  NoLimit : nat64;
  SpreadLimit : record { nat64; nat64 };
  PotLimit : nat64;
  FixedLimit : record { nat64; nat64 };
};
type NewTournament = record {
  min_players : nat8;
  name : text;
  hero_picture : text;
  description : text;
  max_players : nat32;
  late_registration_duration_ns : nat64;
  require_proof_of_humanity : bool;
  start_time : nat64;
  starting_chips : nat64;
  currency : CurrencyType;
  speed_type : NewTournamentSpeedType;
  buy_in : nat64;
  payout_structure : vec PayoutPercentage;
  tournament_type : TournamentType;
};
type NewTournamentSpeedType = variant {
  Regular : nat8;
  Custom : CustomTournamentSpeedType;
  HyperTurbo : nat8;
  Turbo : nat8;
};
type PayoutPercentage = record { position : nat16; percentage : nat8 };
type RebuyOptions = record {
  max_rebuys : nat32;
  rebuy_chips : nat64;
  rebuy_end_timestamp : nat64;
  min_chips_for_rebuy : nat64;
  enabled : bool;
  rebuy_price : nat64;
  rebuy_window_seconds : nat64;
};
type ReentryOptions = record {
  reentry_end_timestamp : nat64;
  max_reentries : nat32;
  reentry_chips : nat64;
  enabled : bool;
  reentry_price : nat64;
};
type Result = variant { Ok; Err : TournamentIndexError };
type Result_1 = variant { Ok : principal; Err : TournamentIndexError };
type Result_2 = variant { Ok : opt text; Err : TournamentIndexError };
type Result_3 = variant { Ok : opt principal; Err : TournamentIndexError };
type Result_4 = variant { Ok : text; Err : TournamentIndexError };
type Result_5 = variant { Ok : nat64; Err : TournamentIndexError };
type Result_6 = variant { Ok : Currency; Err : TournamentIndexError };
type Result_7 = variant {
  Ok : vec record { principal; CanisterManagementError };
  Err : TournamentIndexError;
};
type SpeedType = variant {
  Regular : SpeedTypeParams;
  Custom : SpeedTypeParams;
  HyperTurbo : SpeedTypeParams;
  Turbo : SpeedTypeParams;
};
type SpeedTypeParams = record {
  current_level : nat8;
  ante_start_level : nat8;
  ante_percentage : nat8;
  next_level_time : opt nat64;
  blind_multiplier : float64;
  blind_levels : vec BlindLevel;
  initial_blind_percentage : nat8;
  level_duration_ns : nat64;
};
type SpinGoMultiplier = record {
  multiplier : nat64;
  payout_structure : vec PayoutPercentage;
};
type TableBalancer = record {
  balance_interval_ns : nat64;
  max_players_per_table : nat8;
  min_players_per_table : nat8;
};
type TableConfig = record {
  max_inactive_turns : nat16;
  enable_rake : opt bool;
  card_color : nat64;
  name : text;
  color : nat64;
  currency_type : CurrencyType;
  is_shared_rake : opt record { principal; text };
  is_private : opt bool;
  seats : nat8;
  require_proof_of_humanity : opt bool;
  environment_color : nat64;
  max_seated_out_turns : opt nat16;
  is_paused : opt bool;
  game_type : GameType;
  timer_duration : nat16;
  auto_start_timer : nat16;
  ante_type : opt AnteType;
  table_type : opt TableType;
};
type TableError = variant {
  UserAlreadyExists;
  SeatNotFound;
  StateNotInitialized;
  AuthorizationError;
  Chat : ChatError;
  Game : GameError;
  BlockQueryFailed : text;
  UserBanned;
  LockError;
  PlayerNotFound;
  InvalidTransactionDetails;
  ManagementCanisterError : CanisterManagementError;
  LedgerError : text;
  BlockNotFound;
  CurrencyError : CurrencyError;
  DuplicateTransaction;
  InvalidRequest : text;
  InvalidTransactionType;
  QueryError : text;
  UserError : UserError;
  UserAlreadyInGame;
  CanisterCallError : text;
  UserNotVerified;
  TableNotFound;
  InvalidBlinds;
  SerializationError : text;
  UserNotFound;
  InsufficientFunds;
  NoWinner;
};
type TableInfo = record {
  players : vec principal;
  last_balance_time : opt nat64;
};
type TableType = variant {
  Cash;
  Tournament : record { is_final_table : bool; tournament_id : principal };
  SitAndGo;
  Satellite;
};
type Token = record { decimals : nat8; ledger_id : principal; symbol : blob };
type TournamentData = record {
  id : principal;
  table_config : TableConfig;
  sorted_users : opt vec principal;
  min_players : nat8;
  name : text;
  hero_picture : text;
  description : text;
  max_players : nat32;
  late_registration_duration_ns : nat64;
  tables : vec record { principal; TableInfo };
  require_proof_of_humanity : bool;
  state : TournamentState;
  start_time : nat64;
  starting_chips : nat64;
  currency : CurrencyType;
  speed_type : SpeedType;
  all_players : vec record { principal; UserTournamentData };
  current_players : vec record { principal; UserTournamentData };
  buy_in : nat64;
  payout_structure : vec PayoutPercentage;
  tournament_type : TournamentType;
};
type TournamentError = variant {
  NotRegistered;
  AddonNotAllowed : text;
  UserBanned;
  LockError;
  RebuyNotAllowed : text;
  AlreadyRegistered;
  NotAuthorized;
  ManagementCanisterError : CanisterManagementError;
  RegistrationClosed;
  InvalidConfiguration : text;
  UserError : UserError;
  TournamentNotFound;
  Other : text;
  TournamentFull;
  CanisterCallError : text;
  TransferFailed : text;
  UserNotVerified;
  TableError : TableError;
  TemplateNotFound;
  TableNotFound;
  ReentryNotAllowed : text;
  InvalidState : text;
  InsufficientFunds;
};
type TournamentIndexError = variant {
  InvalidTournamentConfig : text;
  TournamentCreationError : TournamentError;
  FailedToAddToUserPool : text;
  PoolNotFound;
  InvalidCurrency;
  LockError;
  FailedToAddToTablePool : text;
  InsufficientCycles;
  NotAuthorized;
  ManagementCanisterError : CanisterManagementError;
  CanisterCallFailed : text;
  TournamentNotFound;
  InsufficientLiquidity;
  CanisterCallError : text;
};
type TournamentSizeType = variant {
  MultiTable : record { BuyInOptions; TableBalancer };
  SingleTable : BuyInOptions;
};
type TournamentState = variant {
  Registration;
  FinalTable;
  LateRegistration;
  Running;
  Cancelled;
  Completed;
};
type TournamentType = variant {
  SpinAndGo : record { TournamentSizeType; SpinGoMultiplier };
  BuyIn : TournamentSizeType;
  SitAndGo : TournamentSizeType;
  Freeroll : TournamentSizeType;
};
type UserError = variant {
  MinimumVerificationDateMismatch;
  UserAlreadyExists;
  StateNotInitialized;
  AuthorizationError;
  PrincipalError : text;
  BlockQueryFailed : text;
  LockError;
  InvalidTransactionDetails;
  ManagementCanisterError : CanisterManagementError;
  LedgerError : text;
  CanisterCallFailed : text;
  InvalidCredentialType : text;
  BlockNotFound;
  DuplicateTransaction;
  InvalidRequest : text;
  InvalidTransactionType;
  QueryError : text;
  InvalidIssuer;
  UpgradeError : text;
  SerializationError : text;
  UserNotFound;
  InsufficientFunds;
  InvalidCredentialStructure;
};
type UserTournamentData = record {
  chips : nat64;
  users_canister_principal : principal;
  addons : nat32;
  position : nat32;
  reentries : nat32;
  rebuys : nat32;
};
service : () -> {
  add_to_pool : (principal) -> (Result);
  clear_pool : () -> (Result);
  create_tournament : (NewTournament, TableConfig) -> (Result_1);
  delete_tournament : (principal) -> (Result);
  get_account_number : () -> (Result_2) query;
  get_active_tournaments : (opt nat8) -> (vec TournamentData) query;
  get_all_tournaments : () -> (vec TournamentData) query;
  get_and_remove_from_pool : () -> (Result_3);
  get_blind_level_at_timestamp : (
      NewTournamentSpeedType,
      nat64,
      nat64,
      nat64,
    ) -> (opt BlindLevel) query;
  get_canister_status_formatted : () -> (Result_4);
  get_ckbtc_balance : () -> (Result_5);
  get_cketh_balance : () -> (Result_5);
  get_ckusdc_balance : () -> (Result_5);
  get_ckusdt_balance : () -> (Result_5);
  get_completed_tournaments : () -> (vec TournamentData) query;
  get_icp_balance : () -> (Result_5);
  get_player_tournaments : (principal) -> (vec TournamentData) query;
  get_pool : () -> (vec principal) query;
  join_spin_and_go_tournament : (nat64, principal, principal) -> (Result);
  leave_spin_and_go_tournament : (nat64, principal, principal) -> (Result);
  ping : () -> (text) query;
  purge_table_pool : () -> ();
  register_token : (principal) -> (Result_6);
  request_cycles : () -> (Result);
  update_tournament_state : (principal, TournamentState) -> (Result);
  upgrade_all_tournament_canisters : () -> (Result_7);
  upgrade_tournament_canister : (principal) -> (Result);
  withdraw_ckbtc : (principal, nat64) -> (Result);
  withdraw_cketh : (principal, nat64) -> (Result);
  withdraw_ckusdc : (principal, nat64) -> (Result);
  withdraw_ckusdt : (principal, nat64) -> (Result);
  withdraw_icp : (principal, nat64) -> (Result);
}
