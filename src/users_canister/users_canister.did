type CanisterManagementError = variant {
  CreateCanisterError : text;
  InsufficientCycles;
  ManagementCanisterError : text;
  LedgerError : text;
  StopCanisterError : text;
  Transfer : text;
  QueryError : text;
  CanisterCallError : text;
  DeleteCanisterError : text;
  InstallCodeError : text;
};
type EmojiUserAvatar = record { emoji : nat64; style : nat64 };
type Result = variant { Ok : User; Err : UserError };
type Result_1 = variant { Ok; Err : UserError };
type Result_10 = variant { Ok; Err : text };
type Result_2 = variant { Ok : record { User; nat64 }; Err : UserError };
type Result_3 = variant { Ok : vec principal; Err : UserError };
type Result_4 = variant { Ok : text; Err : UserError };
type Result_5 = variant { Ok : nat64; Err : UserError };
type Result_6 = variant {
  Ok : vec record { principal; nat64 };
  Err : UserError;
};
type Result_7 = variant { Ok : nat8; Err : UserError };
type Result_8 = variant { Ok : opt principal; Err : UserError };
type Result_9 = variant { Ok : float64; Err : UserError };
type User = record {
  experience_points_pure_poker : opt nat64;
  experience_points : opt nat64;
  user_name : text;
  referrer : opt principal;
  eth_wallet_address : opt text;
  balance : nat64;
  referred_users : opt vec record { principal; nat64 };
  is_verified : opt bool;
  address : opt text;
  principal_id : principal;
  referral_start_date : opt nat64;
  active_tables : vec principal;
  users_canister_id : principal;
  volume_level : opt nat16;
  enlarge_text : opt bool;
  avatar : opt UserAvatar;
};
type UserAvatar = variant { Emoji : EmojiUserAvatar };
type UserError = variant {
  MinimumVerificationDateMismatch;
  UserAlreadyExists;
  StateNotInitialized;
  AuthorizationError;
  PrincipalError : text;
  BlockQueryFailed : text;
  LockError;
  InvalidTransactionDetails;
  ManagementCanisterError : CanisterManagementError;
  LedgerError : text;
  CanisterCallFailed : text;
  InvalidCredentialType : text;
  BlockNotFound;
  DuplicateTransaction;
  InvalidRequest : text;
  InvalidTransactionType;
  QueryError : text;
  InvalidIssuer;
  UpgradeError : text;
  SerializationError : text;
  UserNotFound;
  InsufficientFunds;
  InvalidCredentialStructure;
};
service : () -> {
  add_active_table : (principal, principal) -> (Result);
  add_experience_points : (nat64, text, principal) -> (Result);
  clear_experience_points : () -> (Result_1);
  clear_pure_poker_experience_points : () -> (Result_1);
  create_user : (
      text,
      opt text,
      principal,
      opt UserAvatar,
      opt text,
      opt principal,
    ) -> (Result_2);
  get_active_tables : (principal) -> (Result_3) query;
  get_canister_status_formatted : () -> (Result_4);
  get_experience_points_by_uid : (principal) -> (Result_5) query;
  get_pure_poker_experience_points_by_uid : (principal) -> (Result_5) query;
  get_pure_poker_user_experience_points : () -> (Result_6) query;
  get_referral_rake_percentage : (principal) -> (Result_7);
  get_referral_tier : (principal) -> (Result_7) query;
  get_referred_users : (principal) -> (Result_3) query;
  get_referrer : (principal) -> (Result_8);
  get_user : (principal) -> (Result) query;
  get_user_experience_points : () -> (Result_6) query;
  get_user_icc : (principal) -> (Result);
  get_user_level : (principal) -> (Result_9) query;
  get_verified_pure_poker_user_experience_points : () -> (Result_6) query;
  get_verified_user_experience_points : () -> (Result_6) query;
  ping : () -> (text) query;
  remove_active_table : (principal, principal) -> (Result);
  update_user : (
      principal,
      opt text,
      opt nat64,
      opt text,
      opt UserAvatar,
      opt bool,
      opt nat16,
      opt text,
    ) -> (Result);
  verify_credential : (principal, text, text, principal) -> (Result_10);
}
