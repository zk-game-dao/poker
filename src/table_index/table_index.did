type ActionLog = record {
  user_principal : opt principal;
  action_type : ActionType;
  timestamp : nat64;
};
type ActionType = variant {
  Bet : record { amount : nat64 };
  Win : record { amount : nat64 };
  Leave;
  Stage : record { stage : DealStage };
  Call;
  Fold;
  Join;
  BigBlind;
  PlayersHandsRankedMainPot : record {
    hands : vec record { text; vec Card; nat64 };
  };
  Raise : record { amount : nat64 };
  SidePotCreated;
  Kicked : record { reason : text };
  PlayersHandsRankedSidePot : record {
    hands : vec record { text; vec Card; nat64 };
  };
  AllIn : record { amount : nat64 };
  SmallBlind;
  Check;
};
type AnteType = variant {
  PercentageOfBigBlind : nat8;
  None;
  BigBlindAnte;
  Fixed : nat64;
};
type CKTokenSymbol = variant { ETH; USDC; USDT };
type CanisterManagementError = variant {
  CreateCanisterError : text;
  InsufficientCycles;
  ManagementCanisterError : text;
  LedgerError : text;
  StopCanisterError : text;
  Transfer : text;
  QueryError : text;
  CanisterCallError : text;
  DeleteCanisterError : text;
  InstallCodeError : text;
};
type Card = record { value : Value; suit : Suit };
type CardRequestData = record {
  user_principal : principal;
  show_cards : bool;
  amount : nat64;
};
type ChatError = variant {
  EditTimeExpired : nat64;
  SenderMuted : principal;
  LockError : text;
  MessageNotFound : nat64;
  DuplicateMessageId : nat64;
  ChatHistoryFull;
  Unauthorized : record { reason : text };
  RateLimitExceeded;
  InvalidRequest : record { reason : text };
  UserNotInTable : principal;
  InternalError : text;
  MessageTooLong : record { max_size : nat64; current_size : nat64 };
};
type Currency = variant {
  BTC;
  ICP;
  GenericICRC1 : Token;
  CKETHToken : CKTokenSymbol;
};
type CurrencyError = variant {
  WalletNotSet;
  BlockQueryFailed : text;
  InsufficientAllowance;
  LockError;
  NoDepositAddress;
  InvalidTransactionDetails;
  OperationNotSupported : text;
  TransferFromFailed : text;
  LedgerError : text;
  CanisterCallFailed : text;
  BlockNotFound;
  DuplicateTransaction;
  WithdrawalFailed : text;
  InvalidTransactionType;
  QueryError : text;
  NoTransactionSignatureProvided;
  TransactionNotFound;
  GetBlockError : text;
  SerializationError : text;
  AllowanceCheckFailed : text;
  InsufficientFunds;
  NoBlockNumberProvided;
};
type CurrencyType = variant { Fake; Real : Currency };
type DealStage = variant {
  Opening;
  Flop;
  Turn;
  River;
  Showdown;
  Fresh;
  Blinds;
};
type EmojiUserAvatar = record { emoji : nat64; style : nat64 };
type FilterOptions = record {
  exclude_timer_duration : opt nat16;
  exclude_game_type : opt GameType;
  exclude_currency_type : opt CurrencyType;
  currency_type : opt CurrencyType;
  seats : opt nat8;
  game_type : opt GameType;
  timer_duration : opt nat16;
  exclude_seats : opt nat8;
};
type GameError = variant {
  UserAlreadyExists;
  CouldNotCalculateRake;
  ActionNotAllowed : record { reason : text };
  PlayerNotFound;
  NoCardsLeft;
  CardNotFound;
  GameFull;
  CanisterCallFailed : text;
  UserAlreadyInGame;
  Other : text;
  InvalidCardValue;
  BlindInsufficientFunds : record { user_id : nat64 };
  TableNotFound;
  InsufficientFunds;
  NoWinner;
};
type GameType = variant {
  NoLimit : nat64;
  SpreadLimit : record { nat64; nat64 };
  PotLimit : nat64;
  FixedLimit : record { nat64; nat64 };
};
type GlobalRakeStats = record {
  table_stats : vec TableRakeStats;
  total_rake_collected : nat64;
  total_rake_shared : nat64;
};
type PlayerAction = variant {
  Joining;
  Folded;
  None;
  SittingOut;
  AllIn;
  Checked;
  Raised : nat64;
  Called;
};
type PublicTable = record {
  id : principal;
  pot : nat64;
  user_table_data : vec record { principal; UserTableData };
  status : TableStatus;
  deal_stage : DealStage;
  small_blind : nat64;
  sorted_users : opt vec UserCards;
  last_timer_started_timestamp : nat64;
  action_logs : vec ActionLog;
  queue : vec QueueItem;
  last_raise : nat64;
  seats : vec SeatStatus;
  round_ticker : nat64;
  community_cards : vec Card;
  current_player_index : nat64;
  big_blind : nat64;
  users : Users;
  dealer_position : nat64;
  highest_bet : nat64;
  config : TableConfig;
  side_pots : vec SidePot;
  winners : opt vec User;
};
type QueueItem = variant {
  Deposit : record { principal; principal; nat64 };
  SittingOut : principal;
  UpdateBlinds : record { nat64; nat64; opt AnteType };
  PauseTableForAddon : nat64;
  RemoveUser : record { principal; ActionType };
  SittingIn : record { principal; bool };
  PauseTable;
  LeaveTableToMove : record { principal; principal; principal };
};
type Rake = record {
  cap_4_plus_players : nat64;
  cap_2_3_players : nat64;
  percentage_millipercent : nat64;
};
type Rank = variant {
  StraightFlush : nat32;
  Straight : nat32;
  OnePair : nat32;
  FullHouse : nat32;
  TwoPair : nat32;
  HighCard : nat32;
  ThreeOfAKind : nat32;
  Flush : nat32;
  FourOfAKind : nat32;
};
type Result = variant { Ok : PublicTable; Err : TableIndexError };
type Result_1 = variant { Ok; Err : TableIndexError };
type Result_2 = variant { Ok : vec Result_1; Err : TableIndexError };
type Result_3 = variant { Ok : opt text; Err : TableIndexError };
type Result_4 = variant {
  Ok : vec record { principal; TableConfig };
  Err : TableIndexError;
};
type Result_5 = variant { Ok : GlobalRakeStats; Err : TableIndexError };
type Result_6 = variant { Ok : vec principal; Err : TableIndexError };
type Result_7 = variant {
  Ok : vec record { principal; CanisterManagementError };
  Err : TableIndexError;
};
type Result_8 = variant { Ok; Err : TableError };
type SeatStatus = variant {
  Empty;
  QueuedForNextRound : record { principal; User; bool };
  Reserved : record { "principal" : principal; timestamp : nat64 };
  Occupied : principal;
};
type SidePot = record {
  pot : nat64;
  confirmed_pot : nat64;
  highest_bet : nat64;
  user_principals : vec principal;
};
type Suit = variant { Spade; Diamond; Club; Heart };
type TableConfig = record {
  max_inactive_turns : nat16;
  enable_rake : opt bool;
  card_color : nat64;
  name : text;
  color : nat64;
  currency_type : CurrencyType;
  is_shared_rake : opt record { principal; text };
  is_private : opt bool;
  seats : nat8;
  require_proof_of_humanity : opt bool;
  environment_color : nat64;
  max_seated_out_turns : opt nat16;
  is_paused : opt bool;
  game_type : GameType;
  timer_duration : nat16;
  auto_start_timer : nat16;
  ante_type : opt AnteType;
  table_type : opt TableType;
};
type TableError = variant {
  UserAlreadyExists;
  SeatNotFound;
  StateNotInitialized;
  AuthorizationError;
  Chat : ChatError;
  Game : GameError;
  BlockQueryFailed : text;
  LockError;
  PlayerNotFound;
  InvalidTransactionDetails;
  ManagementCanisterError : CanisterManagementError;
  LedgerError : text;
  BlockNotFound;
  CurrencyError : CurrencyError;
  DuplicateTransaction;
  InvalidRequest : text;
  InvalidTransactionType;
  QueryError : text;
  UserError : UserError;
  UserAlreadyInGame;
  CanisterCallError : text;
  UserNotVerified;
  TableNotFound;
  InvalidBlinds;
  SerializationError : text;
  UserNotFound;
  InsufficientFunds;
  NoWinner;
};
type TableIndexError = variant {
  StateNotInitialized;
  AuthorizationError;
  NoTableAvailable;
  BlockQueryFailed;
  LockError;
  InvalidTransactionDetails;
  NoAvailableTables : text;
  ManagementCanisterError : CanisterManagementError;
  LedgerError : text;
  BlockNotFound;
  CurrencyError : CurrencyError;
  DuplicateTransaction;
  InvalidRequest : text;
  InvalidTransactionType;
  QueryError : text;
  CanisterCallError : text;
  TableError : TableError;
  TableNotFound;
  InvalidBlinds;
  SerializationError : text;
  UserNotFound;
  InsufficientFunds;
  NoWinner;
};
type TableRakeStats = record {
  total_rake_collected : nat64;
  table_id : principal;
  total_rake_shared : nat64;
};
type TableStatus = variant { Paused; Reserved; Open; Closed };
type TableType = variant {
  Cash;
  Tournament : record { is_final_table : bool; tournament_id : principal };
  SitAndGo;
  Satellite;
};
type Token = record { decimals : nat8; ledger_id : principal; symbol : blob };
type Transaction = record {
  transaction_id : nat64;
  transaction_type : TransactionType;
  currency : opt text;
  timestamp : nat64;
  amount : nat64;
};
type TransactionType = variant {
  Withdraw;
  Deposit;
  TableWithdraw : record { table_id : principal };
  Transfer : record { recipient : principal; transfer_type : TransferType };
  TableDeposit : record { table_id : principal };
  Receive : record { sender : principal; transfer_type : TransferType };
};
type TransferType = variant { CardShowRequest };
type User = record {
  experience_points_pure_poker : opt nat64;
  experience_points : opt nat64;
  user_name : text;
  referrer : opt principal;
  eth_wallet_address : opt text;
  balance : nat64;
  referred_users : opt vec principal;
  is_verified : opt bool;
  address : opt text;
  transaction_history : opt vec Transaction;
  principal_id : principal;
  referral_start_date : opt nat64;
  active_tables : vec principal;
  users_canister_id : principal;
  volume_level : opt nat16;
  enlarge_text : opt bool;
  avatar : opt UserAvatar;
};
type UserAvatar = variant { Emoji : EmojiUserAvatar };
type UserCards = record {
  id : principal;
  cards : vec Card;
  rank : Rank;
  amount_won : nat64;
};
type UserError = variant {
  MinimumVerificationDateMismatch;
  UserAlreadyExists;
  StateNotInitialized;
  AuthorizationError;
  PrincipalError : text;
  BlockQueryFailed : text;
  LockError;
  InvalidTransactionDetails;
  ManagementCanisterError : CanisterManagementError;
  LedgerError : text;
  CanisterCallFailed : text;
  InvalidCredentialType : text;
  BlockNotFound;
  DuplicateTransaction;
  InvalidRequest : text;
  InvalidTransactionType;
  QueryError : text;
  InvalidIssuer;
  UpgradeError : text;
  SerializationError : text;
  UserNotFound;
  InsufficientFunds;
  InvalidCredentialStructure;
};
type UserTableData = record {
  experience_points : nat64;
  inactive_turns : nat16;
  player_action : PlayerAction;
  cards : vec Card;
  total_bet : nat64;
  current_total_bet : nat64;
  show_card_requests : vec CardRequestData;
  seated_out_turns : nat16;
  auto_check_fold : bool;
};
type Users = record { users : vec record { principal; User } };
type Value = variant {
  Ace;
  Six;
  Ten;
  Two;
  Eight;
  Seven;
  Five;
  Four;
  Jack;
  King;
  Nine;
  Three;
  Queen;
};
service : () -> {
  create_table : (TableConfig, opt principal) -> (Result);
  delete_all_tables : () -> (Result_2);
  delete_table_by_id : (principal) -> (Result_1);
  get_account_number : () -> (Result_3) query;
  get_all_public_tables : () -> (Result_4) query;
  get_all_rake_stats : () -> (Result_5);
  get_all_table_principals : () -> (Result_6) query;
  get_private_tables : () -> (Result_6) query;
  get_rake : (nat64, Currency, GameType) -> (opt Rake) query;
  get_rake_wallet_info : () -> (principal, text) query;
  get_table : (principal) -> (Result);
  get_tables : (opt FilterOptions, nat16, nat16) -> (Result_4);
  monitor_and_top_up_table_canisters : () -> (Result_1);
  ping : () -> (text) query;
  purge_dud_tables : () -> (Result_1);
  quick_join_table : (principal, principal, nat64, CurrencyType) -> (Result);
  remove_table_from_indexes : (principal) -> (Result_1);
  request_cycles : () -> (Result_1);
  top_up_table_canister : (principal, nat) -> (Result_1);
  update_table_player_count : (principal, nat64) -> (Result_1);
  upgrade_all_table_canisters : () -> (Result_7);
  upgrade_table_canister : (principal) -> (Result_1);
  withdraw_rake : (nat64) -> (Result_8);
}
