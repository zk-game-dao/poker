
name: zkGame

# Description
description: >
    zkGame DAO will govern fully on-chain betting platforms built on the Internet Computer, 
    including zkPoker and PurePoker. Founded on principles of decentralization, provable 
    fairness, and trustless architecture, these platforms eliminate the transparency issues 
    and security risks that have plagued traditional online betting platforms.
    
    Our flagship products feature provably fair gameplay, transparent mechanics, and innovative 
    Host-to-Earn features that allow players to create their own tables and share up to 50% 
    of the generated rake. All gameplay, from card shuffling to prize distribution, happens 
    on-chain with verifiable randomness.
    
    Further development of the ecosystem will include XDRC, a decentralized stablecoin, and more 
    games with wager elements such as chess and mahjong, along with further development of the use 
    cases and utility of ZKG and XDRC.
    
    This DAO represents our vision of a self-sustaining, community-governed betting ecosystem 
    that returns value to participants while maintaining the highest standards of fairness.

    https://zk.game/whitepaper/zkgame-dao

# Path to the SNS Project logo on the local filesystem. The path is relative
# to the configuration file's location, unless an absolute path is given.
# Must have less than 341,334 bytes. The only supported format is PNG.
# Consider that NNS dapp will render the image with a 1:1 aspect ratio and
# cropped to a circle.
logo: ./src/app_frontend/public/logo.png

# URL that represents the SNS, usually a dapp controlled by the SNS project.
# Must be a string from 10 to 512 bytes, and the domain must be HTTPS.
url: https://zk.game

# Metadata for the NNS proposal required to create the SNS. This data will be
# shown only in the NNS proposal.
NnsProposal:
    # The title of the NNS proposal. Must be a string of 4 to 256 bytes.
    title: "NNS Proposal to create an SNS named 'zkGame DAO'"

    # The HTTPS address of a forum post with additional context required to evaluate the NNS
    # proposal.
    # This will go in the `url` field of the proposal.
    # Must be a string of 10 to 2,048 bytes.
    # The protocol must be HTTPS, and the domain must be forum.dfinity.org.
    url: "https://forum.dfinity.org/t/were-preparing-to-launch-zkgame-dao-on-the-sns/48128"

    # The description of the proposal. Must be a string of 10 to 2,000 bytes.
    summary: >
        Proposal to create an SNS for zkGames DAO, a fully on-chain suite of betting platforms built on the Internet Computer.
        
        zkGames currently operates two flagship products: zkPoker and PurePoker, which are fully on-chain poker platforms with provably fair gameplay and transparent mechanics. The platforms feature Host-to-Earn capabilities allowing users to create tables and share in revenue.
        
        This SNS will govern the zkGames ecosystem, including control over critical canisters, treasury management, and future development of additional games such as Mahjong and Chess. The ecosystem also includes XDRC, a decentralized stablecoin pegged to XDR.
        
        The SNS token (ZKG) will serve as both governance and utility token. Initial total supply will be 1,000,000,000 tokens allocated as follows:
        - Treasury: 50% (500,000,000)
        - Protection Fund: 25% (250,000,000)
        - Ecosystem Incentives: 5% (50,000,000)
        - Strategic Reserve: 20% (200,000,000)
        - Early Investors & Contributors: 10.5% (104,850,000)
        - Team: 14.5% (145,150,000)
        - SNS Launchpad: 25% (250,000,000)
        
        The SNS will be initialized with neurons for the core team and early contributors with appropriate dissolve delays and vesting periods to ensure long-term alignment with the project's success.
        
        Treasury funds will support gambling licensing, operational costs, community incentives, marketing initiatives, and liquidity provision for the ZKG token.
        
        By supporting this proposal, you're helping to create a truly decentralized, community-governed betting ecosystem that leverages the Internet Computer's unique capabilities to provide unprecedented transparency and fairness in online gaming.

# If the SNS launch attempt fails, control over the dapp canister(s) is given to
# these principals. In most use cases, this is chosen to be the original set of
# controller(s) of the dapp. Must be a list of PrincipalIds.
fallback_controller_principals:
    # For the actual SNS launch, you should replace this with one or more
    # principals of your intended fallback controllers.
    #
    # For testing, propose_sns.sh will fill this in automatically.
    - km7qz-4bai4-e5ptx-hgrck-z3web-ameqg-ksxcf-u7wbr-t5fna-i7bqp-hqe
    - uyxh5-bi3za-gxbfs-op3gj-ere73-a6jhv-5jky3-zawef-b5r2s-k26un-sae
    - p2xv2-fhe7e-5wlj3-pkcc2-ekpe4-co4xg-62gaq-37ed5-hufq3-olk4n-4ae

# The list of dapp canister(s) that will be decentralized if the
# decentralization swap succeeds. These are defined in the form of canister IDs,
# for example, `bnz7o-iuaaa-aaaaa-qaaaa-cai`.  For a successful SNS launch,
# these dapp canister(s) must be co-controlled by the NNS Root canister
# (`r7inp-6aaaa-aaaaa-aaabq-cai`) at latest at the time when the NNS proposal to
# create an SNS is adopted (usually this is required even earlier, e.g., to
# convince NNS neurons to vote in favor of your proposal).
dapp_canisters:
    # For the actual SNS launch, you should replace this with one or more
    # IDs of the canisters comprising your to-be-decentralized dapp.
    #
    # For testing, propose_sns.sh will fill this in automatically.
    - "h37sg-kqaaa-aaaad-qhkvq-cai" # zk.game frontend
    - "z5wv2-oiaaa-aaaam-qbeyq-cai" # zkpoker.app frontend
    - "j5kch-7yaaa-aaaam-qds2a-cai" # purepoker.app frontend
    - "xa3co-zqaaa-aaaam-qdxia-cai" # clans canister
    - "xh2e2-uiaaa-aaaam-qdxiq-cai" # clans_index canister
    - "zuv6g-yaaaa-aaaam-qbeza-cai" # cycle_dispenser canister
    - "j2let-saaaa-aaaam-qds2q-cai" # ic_siwb_provider canister
    - "ztuys-vyaaa-aaaam-qbezq-cai" # log_store canister
    - "zbspl-ziaaa-aaaam-qbe2q-cai" # table_index canister
    - "zocwf-5qaaa-aaaam-qdfaq-cai" # tournament_index canister
    - "lvq5c-nyaaa-aaaam-qdswa-cai" # users_index canister
    - "zgtj7-uqaaa-aaaam-qbe2a-cai" # table_canister
    - "zjdqr-qiaaa-aaaam-qdfaa-cai" # tournament_canister
    - "laxmp-mqaaa-aaaam-qdsvq-cai" # users_canister

# Configuration of SNS tokens in the SNS Ledger canister deployed as part
# of the SNS.
Token:
    # The name of the token issued by the SNS ledger.
    # Must be a string of 4 to 255 bytes without leading or trailing spaces.
    name: zkGames DAO

    # The symbol of the token issued by the SNS Ledger.
    # Must be a string of 3 to 10 bytes without leading or trailing spaces.
    symbol: ZKG

    # SNS ledger transaction fee.
    transaction_fee: 10_000 e8s

    # Path to the SNS token logo on your local filesystem. The path is relative
    # to the configuration file location, unless an absolute path is given.
    # Must have less than 341,334 bytes. The only supported format is PNG.
    logo: ./src/app_frontend/public/logo.png

# Configures SNS proposal-related fields. These fields define the initial values
# for some of the nervous system parameters related to SNS proposals. This will
# not affect all SNS proposals submitted to the newly created SNS.
Proposals:
    # The cost of making an SNS proposal that is rejected by the SNS neuron
    # holders. This field is specified as a token. For example: "1 token".
    rejection_fee: 100 token

    # The initial voting period of an SNS proposal. A proposal's voting period
    # may be increased during its lifecycle due to the wait-for-quiet algorithm
    # (see details below). This field is specified as a duration. For example
    # "4 days".
    initial_voting_period: 4 days

    # The wait-for-quiet algorithm extends the voting period of a proposal when
    # there is a flip in the majority vote during the proposal's voting period.
    #
    # Without this, there could be an incentive to vote right at the end of a
    # proposal's voting period, in order to reduce the chance that people will
    # see and have time to react to that.
    #
    # If this value is set to 1 day, then a change in the majority vote at the
    # end of a proposal's original voting period results in an extension of the
    # voting period by an additional day. Another change at the end of the
    # extended period will cause the voting period to be extended by another
    # half-day, etc.
    #
    # The total extension to the voting period will never be more than twice
    # this value.
    #
    # For more information, please refer to
    # https://wiki.internetcomputer.org/wiki/NNS_Canisters#Proposal_decision_and_wait-for-quiet
    #
    # This field is specified as a duration. For example: "1 day".
    maximum_wait_for_quiet_deadline_extension: 2 day

# Configuration of SNS voting.
Neurons:
    # The minimum amount of SNS tokens to stake a neuron. This field is specified
    # as a token. For instance, "1 token".
    minimum_creation_stake: 2_000 tokens

# Configuration of SNS voting.
Voting:
    # The minimum dissolve delay a neuron must have to be able to cast votes on
    # proposals.
    #
    # Dissolve delay incentivizes neurons to vote in the long-term interest of
    # an SNS, as they are rewarded for longer-term commitment to that SNS.
    #
    # Users cannot access the SNS tokens used to stake neurons (until the neuron
    # is dissolved). This field is specified as a duration. For example: "6 months".
    minimum_dissolve_delay: 2 months

    # Configuration of voting power bonuses that are applied to neurons to
    # incentivize alignment with the best interest of the DAO. Note, these
    # bonuses multiply each other, so the increase in voting power due to
    # the dissolve delay bonus is used in the equation to increase voting
    # power for the age bonus.
    MaximumVotingPowerBonuses:
        # Users with a higher dissolve delay are incentivized to take the
        # long-term interests of the SNS into consideration when voting. To
        # reward this long-term commitment, this bonus can be set to a
        # percentage greater than zero, which will result in neurons having
        # their voting power increased in proportion to their dissolve delay.
        #
        # For example, if the user has a dissolve delay of 6 months, and
        # the maximum dissolve delay duration (defined below as `duration`)
        # for the dissolve delay bonus is 12 months, and the maximum bonus
        # (defined as `bonus` below) is set to 10%, then that user’s voting
        # power will be 105% of their normal voting power based on staked
        # tokens (i.e. they will have a bonus of 5%). If the user increased
        # their dissolve delay to 9 months, they would get 107.5% of the normal
        # voting power of their tokens. And if they increased to 12 months, they
        # would get 110%. If they increase further, they get no additional bonus.
        #
        # If you do not want this bonus to be applied for neurons with higher
        # dissolve delay, set `bonus` to `0%` and those neurons will not receive
        # higher voting power.
        DissolveDelay:
            # This parameter sets the maximum dissolve delay a neuron can have.
            # When reached, the maximum dissolve delay bonus will be applied.
            # This field is specified as a duration. For example: "8 years".
            duration: 4 years
            # If a neuron's dissolve delay is `duration`, its voting power will
            # be increased by the dissolve delay `bonus` amount. 
            # This field is specified as a percentage. For instance, 
            # a value of "100%" means that the voting power will be doubled
            # (multiplied by 2).
            bonus: 100%

        # Users with neurons staked in the non-dissolving state for a long
        # period of time are incentivized to take the long-term interests of
        # the SNS into consideration when voting. To reward this long-term
        # commitment, this bonus can be set to a percentage (greater than zero),
        # which will result in neurons having their voting power increased in
        # proportion to their age.
        #
        # For example, if the neuron has an age of 6 months, and the maximum age
        # duration (defined below as `duration`) for the age bonus is 12 months,
        # and the maximum bonus (defined as `bonus` below) is set to 10%, then
        # that neuron’s voting power will be 105% of their normal voting power
        # based on staked tokens plus dissolve delay bonus (i.e. they will have a
        # bonus of 5%). If neuron aged another 3 months to have an age of 9 months,
        # the neuron would get 107.5% of the normal voting power. And if the neuron
        # aged another 3 months to 12 months, the neuron would get 110%. If the neuron
        # ages further, it get no additional bonus.
        #
        # If this bonus should not be applied for older neurons, set the bonus
        # to `0%` and older neurons will not receive higher voting power.
        Age:
            # This parameter sets the duration of time the neuron must be staked
            # in the non-dissolving state, in other words its `age`, to reach
            # the maximum age bonus. Once this age is reached, the neuron will
            # continue to age, but no more bonus will be applied. This field
            # is specified as a duration. For example: "2 years".
            duration: 4 years
            # If a neuron's age is `duration` or older, its voting power will be
            # increased by this age`bonus` amount. 
            # This field is specified as a percentage. For instance, 
            # a value of "25%" means that the voting power will increase by a quarter
            # (multiplied by 1.25).
            bonus: 100%

    # Configuration of SNS voting reward parameters.
    #
    # The voting reward rate controls how quickly the supply of the SNS token
    # increases. For example, setting `initial` to `2%` will cause the supply to
    # increase by at most `2%` per year. A higher voting reward rate
    # incentivizes users to participate in governance, but also results in
    # higher inflation.
    #
    # The initial and final reward rates can be set to have a higher reward rate
    # at the launch of the SNS and a lower rate further into the SNS’s lifetime.
    # The reward rate falls quadratically from the `initial` rate to the `final`
    # rate over the course of `transition_duration`.
    #
    # Setting both `initial` and `final` to `0%` will result in the system not
    # distributing voting rewards at all.
    #
    # More details on SNS tokenomics can be found in the developer documentation:
    # https://internetcomputer.org/docs/current/developer-docs/integrations/sns/tokenomics/rewards/#voting-rewards
    RewardRate:
        # The initial reward rate at which the SNS voting rewards will increase
        # per year. This field is specified as a percentage. For example: "15%".
        initial: 3%

        # The final reward rate at which the SNS voting rewards will increase
        # per year. This rate is reached after `transition_duration` and remains
        # at this level unless changed by an SNS proposal. This field is
        # specified as a percentage. For example: "5%".
        final: 1%

        # The voting reward rate falls quadratically from `initial` to `final`
        # over the time period defined by `transition_duration`.
        #
        # Values of 0 result in the reward rate always being `final`.
        #
        # This field is specified as a duration. For example: "8 years".
        transition_duration: 4 years

# Configuration of the initial token distribution of the SNS. You can configure
# how SNS tokens are distributed in each of the three groups:
# (1) tokens that are given to the original developers of the dapp,
# (2) treasury tokens that are owned by the SNS governance canister, and
# (3) tokens which are distributed to the decentralization swap participants.
#
# The initial token distribution must satisfy the following preconditions to be
# valid:
#    - The sum of all developer tokens in E8s must be less than `u64::MAX`.
#    - The Swap's initial balance (see group (3) above) must be greater than 0.
#    - The Swap's initial balance (see group (3) above) must be greater than or
#      equal to the sum of all developer tokens.
Distribution:
    # The initial neurons created when the SNS Governance canister is installed.
    # Each element in this list specifies one such neuron, including its stake,
    # controlling principal, memo identifying this neuron (every neuron that
    # a user has must be identified by a unique memo), dissolve delay, and a
    # vesting period. Even though these neurons are distributed at genesis,
    # they are locked in a (restricted) pre-initialization mode until the
    # decentralization swap is completed. Note that `vesting_period` starts
    # right after the SNS creation and thus includes the pre-initialization mode
    # period.
    #
    # For example:
    #  - principal: hpikg-6exdt-jn33w-ndty3-fc7jc-tl2lr-buih3-cs3y7-tftkp-sfp62-gqe
    #    stake: 1_000 tokens
    #    memo: 0
    #    dissolve_delay: 2 years
    #    vesting_period: 4 years
    Neurons:
        # For the actual SNS launch, you should replace this with one or more
        # principals of your intended genesis neurons.
        #
        # For testing, propose_sns.sh will fill this in automatically.
        # Team allocations

        # Dev identity
        - principal: w3kjy-pitqg-dvab7-tb57q-63gnd-di4vo-loiiy-s6zm2-gqcmw-ixliz-aae
          stake: 2_000 tokens # 10x the Proposal rejection fee of 100 tokens, allowing for 20 Concurrent proposals
          memo: 0
          dissolve_delay: 2 years   
          vesting_period: 0 years

        - principal: f3edy-doi3q-pjieb-tmpmk-xdcht-qplkb-yp7y6-i3qv6-rhlgu-xcts7-eqe
          stake: 35_000_000 tokens
          memo: 1
          dissolve_delay: 2 years   
          vesting_period: 1 years   
          
        - principal: ksjxn-hcz5h-iirie-c27qk-6wtsn-3oz7r-wyhoi-vm22j-agdem-gunct-wqe
          stake: 25_000_000 tokens
          memo: 2
          dissolve_delay: 2 years
          vesting_period: 1 years
          
        - principal: 6hibv-lz3jv-p2ohj-vxock-qt6jq-hm6ro-6kv3a-4kwbd-rflzr-m7ody-6qe
          stake: 35_000_000 tokens
          memo: 3
          dissolve_delay: 2 years
          vesting_period: 1 years

        - principal: ktuio-kj7r3-r53il-rhydd-wdena-lfhji-isg7g-qdxad-cbgl4-jrlbv-bae
          stake: 25_000_000 tokens
          memo: 4
          dissolve_delay: 2 years
          vesting_period: 1 years
          
        - principal: ottho-tegw2-jz43o-7unl3-3rkr4-j6cqt-7r5vn-nxaxn-xeqhd-63bes-uqe
          stake: 20_000_000 tokens
          memo: 5
          dissolve_delay: 2 years
          vesting_period: 1 years
          
        - principal: dj2jt-5gwh7-nxeyp-cvm22-dclcm-yztq3-om652-t557i-4tkfp-uf347-aqe
          stake: 5_148_000 tokens
          memo: 6
          dissolve_delay: 2 years
          vesting_period: 1 years


        # Contributors
        - principal: x52vg-lbch4-ob4ft-lvtcq-fwb2o-6vm5m-odnji-a4htp-7ajof-cu2jt-yae
          stake: 2_000_000 tokens
          memo: 7
          dissolve_delay: 6 months
          vesting_period: 6 months

        - principal: vwa3i-6midp-7pstn-pechc-ygutg-6hqtp-icebw-5e2y6-v3aso-gm4sf-vqe
          stake: 250_000 tokens
          memo: 8
          dissolve_delay: 6 months
          vesting_period: 0 months

        - principal: bdjyr-r4v6q-l6yqs-i5nk4-zhmdw-nnymn-art62-nqog5-q4ktl-yq2iz-jae
          stake: 250_000 tokens
          memo: 9
          dissolve_delay: 6 months
          vesting_period: 0 months

        - principal: vehha-hzlos-fyexv-54yk7-ghyqe-h52vu-ysyvg-kc52f-6vojk-zvk4h-5qe
          stake: 350_000 tokens
          memo: 10
          dissolve_delay: 6 months
          vesting_period: 0 months

        - principal: nl32i-nuz3e-vfhhu-23525-7y5z5-2mvsl-5qwuj-nmese-a5wgj-7dkhn-xae
          stake: 250_000 tokens
          memo: 11
          dissolve_delay: 6 months
          vesting_period: 0 months

        - principal: r6mcb-fhzrt-rhe4q-bvqwz-pdzcg-6swy5-mrzpi-37zdl-ssln2-6cyt3-bae
          stake: 500_000 tokens
          memo: 12
          dissolve_delay: 6 months
          vesting_period: 0 months

        - principal: gvkpc-ktlbn-l3jer-6pcxq-hbulf-vklai-lbyqs-wg3wh-aeo3g-oh2je-zqe
          stake: 1_000_000 tokens
          memo: 13
          dissolve_delay: 6 months
          vesting_period: 0 months

        - principal: uwy3x-roxnk-43zlt-qdgyo-f5s6t-jlyn3-fhmn7-kdn7d-vcrat-jpkht-nqe
          stake: 250_000 tokens
          memo: 14
          dissolve_delay: 6 months
          vesting_period: 0 months


        # Early Investors allocation (10% total)
        - principal: ujdwa-celkx-ttr7b-u7poa-cxa4o-adqgo-3wg73-zbzto-5leaj-by4e4-uqe
          stake: 25_000_000 tokens
          memo: 15
          dissolve_delay: 1 year
          vesting_period: 3 years
          
        - principal: 2yxsw-5kvxb-qexlb-k5cy2-ydbu2-yziqx-mp4c5-c3qpm-wfxn3-mdjix-uqe
          stake: 25_000_000 tokens
          memo: 16
          dissolve_delay: 1 year
          vesting_period: 3 years
          
        - principal: daghh-ci3aj-kobgm-34lb6-edw6f-6ditj-fc3c4-2poq7-j5dqo-k6rff-zae
          stake: 25_000_000 tokens
          memo: 17
          dissolve_delay: 1 year
          vesting_period: 2 years
          
        - principal: poal6-7shsv-hvoji-2qbdf-xce6g-ofsk3-cw4ss-zaq5g-kxuzh-nbowe-lae
          stake: 25_000_000 tokens
          memo: 18
          dissolve_delay: 1 year
          vesting_period: 1 years

    # The initial SNS token balances of the various canisters of the SNS.
    InitialBalances:
        # The initial SNS token balance of the SNS Governance canister is known
        # as the treasury. This is initialized in a special sub-account, as the
        # main account of Governance is the minting account of the SNS Ledger.
        # This field is specified as a token. For instance, "1 token".
        treasury: 500_000_000 tokens  # 50% of total supply for treasury

        # The initial SNS token balance of the Swap canister is what will be
        # available for the decentralization swap. These tokens will be swapped
        # for ICP. This field is specified as a token. For instance, "1 token".
        swap: 250_000_000 tokens  # 25% of total supply for public sale via SNS Launchpad

    # Checksum of the total number of tokens distributed in this section.
    # This field is specified as a token. For instance, "1 token".
    #         145_150_000    (team neurons)
    #         4_850_000      (contributors neurons)
    #         100_000_000    (seed investor neurons)
    #         500_000_000    (treasury)
    #       + 250_000_000    (swap)
    # ------------------
    total: 1_000_000_000 tokens

# Configuration of the decentralization swap parameters. Choose these parameters
# carefully, if a decentralization swap fails, the SNS will restore the dapp
# canister(s) to the fallback controllers (defined in
# `fallback_controller_principals`) and you will need to start over.
Swap:
    # The minimum number of direct participants that must participate for the
    # decentralization swap to succeed. If a decentralization swap finishes due
    # to the deadline or the maximum target being reached, and if there are less
    # than `minimum_participants` (here, only direct participants are counted),
    # the swap will be committed.
    minimum_participants: 100

    # Minimum amount of ICP from direct participants. This amount is required for
    # the swap to succeed. If this amount is not achieved, the swap will be
    # aborted (instead of committed) when the due date/time occurs.
    # Must be smaller than or equal than `maximum_direct_participation_icp`.
    minimum_direct_participation_icp: 150_000 tokens

    # Maximum amount of ICP from direct participants. If this amount is achieved,
    # the swap will finalize immediately, without waiting for the due date/time;
    # in this case, the swap would be committed if and only if the number of
    # direct participants (`minimum_participants`) is reached (otherwise, it
    # would be aborted).
    # Must be at least `min_participants * minimum_direct_participation_icp`.
    maximum_direct_participation_icp: 1_000_000 tokens

    # The minimum amount of ICP that each participant must contribute
    # to participate. This field is specified as a token. For instance,
    # "1 token".
    minimum_participant_icp: 33 token

    # The maximum amount of ICP that each participant may contribute
    # to participate. This field is specified as a token. For instance,
    # "1 token".
    maximum_participant_icp: 100_000 tokens

    # The text that swap participants must confirm before they may participate
    # in the swap.
    #
    # This field is optional. If set, must be within 1 to 1,000 characters and
    # at most 8,000 bytes.
    confirmation_text: >
        I affirm that I am operating within the laws of my jurisdiction and
        that I understand the risks involved with participating in this swap.


    # A list of countries from which swap participation should not be allowed.
    #
    # This field is optional. By default, participants from all countries
    # are allowed.
    #
    # Each list element must be an ISO 3166-1 alpha-2 country code.
    restricted_countries:
        - BD  # Bangladesh
        - CN  # China
        - CU  # Cuba
        - IR  # Iran
        - JP  # Japan
        - KP  # North Korea
        - QA  # Qatar
        - RU  # Russia
        - SA  # Saudi Arabia
        - SG  # Singapore
        - KR  # South Korea
        - SY  # Syria
        - US  # United States
        - BY  # Belarus

    # Configuration of the vesting schedule of the neuron basket, i.e., the SNS
    # neurons that a participants will receive from a successful
    # decentralization swap.
    VestingSchedule:
        # The number of events in the vesting schedule. This translates to how
        # many neurons will be in each participant's neuron basket. Note that
        # the first neuron in each neuron basket will have zero dissolve delay;
        # the 2nd will have dissolve delay `interval`; if present, the 3rd will
        # have dissolve delay `interval` × 2, etc.
        #
        # This value must be greater than or equal to `2`
        # and must not exceed `10`.
        events: 4

        # The interval at which the schedule will be increased per event. The
        # first neuron in the basket will be unlocked with zero dissolve delay.
        # Each other neuron in the schedule will have its dissolve delay
        # increased by `interval` compared to the previous one. For example,
        # if `events` is set to `3` and `interval` is `1 month`, then each
        # participant's neuron basket will have three neurons (with equal stake)
        # with dissolve delays zero, 1 month, and 2 months. Note that the notion
        # of `Distribution.neurons.vesting_period` applies only to developer
        # neurons. While neuron basket neurons do not use `vesting_period`, they
        # have a vesting schedule. This field is specified as a duration. For
        # example: "1 month".
        interval: 4 month

    # Absolute time of day when the decentralization swap is supposed to start.
    #
    # An algorithm will be applied to allow at least 24 hours between the time
    # of execution of the CreateServiceNervousSystem proposal and swap start.
    # For example, if start_time is 23:30 UTC and the proposal is adopted and
    # executed at 23:20 UTC, then the swap start will be at 23:30 UTC the next
    # day (i.e., in 24 hours and 10 min from the proposal execution time).
    #
    # WARNING: Swap start_time works differently on mainnet and in testing.
    #
    # On mainnet:
    # - Setting start_time to some value (e.g., 23:30 UTC) will allow the swap
    #   participants to be prepared for the swap in advance, e.g.,
    #   by obtaining ICPs that they would like to participate with.
    # - If start_time is not specified, the actual start time of the swap will
    #   be chosen at random (allowing at least 24 hours and less than 48 hours,
    #   as described above).
    #
    # In testing:
    # - Setting start_time to some value works the same as explained above.
    # - If start_time is not specified, the swap will begin immediately after
    #   the CreateServiceNervousSystem proposal is executed. This facilitates
    #   testing in an accelerated manner.
    #
    # start_time: 23:30 UTC  # Intentionally commented out for testing.

    # The duration of the decentralization swap. When `start_time` is calculated
    # during CreateServiceNervousSystem proposal execution, this `duration` will
    # be added to that absolute time and set as the swap's deadline.
    duration: 14 days

    # Whether Neurons' Fund participation is requested.
    neurons_fund_participation: false
